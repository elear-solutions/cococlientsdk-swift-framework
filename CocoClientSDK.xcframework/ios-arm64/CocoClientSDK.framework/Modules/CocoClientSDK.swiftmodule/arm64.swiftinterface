// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name CocoClientSDK
import CCocoClientSDK
@_exported import CocoClientSDK
import Foundation
import Swift
import os
@_hasMissingDesignatedInitializers public class InfoRespPIN : CocoClientSDK.InfoResponseValue {
  public var pin: Swift.String {
    get
  }
  public init(pin: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CocoClient {
  public var networkMap: [Swift.String : CocoClientSDK.Network] {
    get
  }
  public var networkStatus: [Swift.String : CocoClientSDK.NetworkDatum] {
    get
  }
  public var cwdPath: Swift.String {
    get
  }
  public var clientId: Swift.String {
    get
  }
  public var apiScope: Swift.String {
    get
  }
  public var downloadPath: Swift.String {
    get
  }
  public var devCreator: CocoClientSDK.Creator? {
    get
  }
  public static var timeout: Swift.UInt32
  public static func get_instance(platform: CocoClientSDK.PlatformDelegate, cocoCallbackDelegate: CocoClientSDK.CocoCallbackDelegate, connectivityTimers: CocoClientSDK.ConnectivityTimers?, creator: CocoClientSDK.Creator?) throws -> CocoClientSDK.CocoClient
  public func get_saved_networks() throws -> [CocoClientSDK.Network]
  public func get_all_coconet(requestContext: Swift.UnsafeMutableRawPointer?) throws
  public static func set_tokens(response: Swift.String) throws
  public static func get_access_token(context: Swift.UnsafeMutableRawPointer?) throws
  public func send_info_response(infoResponse: CocoClientSDK.InfoResponse, context: Swift.UnsafeMutableRawPointer?) throws
  public func send_info_request(infoRequest: CocoClientSDK.InfoRequest, context: Swift.UnsafeMutableRawPointer?) throws
  public func coco_client_get_available_channel_port(device: CocoClientSDK.Device, portCount: Swift.UInt16) -> [Swift.UInt16]
  public func coco_client_invalidate_access_token() -> Swift.Int32
  public func Save() throws -> Swift.String?
  public func Restore(from data: Swift.String) throws
  @objc deinit
}
public class CommandMotionSensing : CocoClientSDK.Command {
  public var commandID: CocoClientSDK.CapabilityMotionSensing.CommandId {
    get
  }
  public init(commandID: CocoClientSDK.CapabilityMotionSensing.CommandId)
  @objc deinit
  override public init(cmdID: Swift.Int32)
}
@_inheritsConvenienceInitializers public class CommandEnableDisbale : CocoClientSDK.CommandMotionSensing {
  override public init(commandID: CocoClientSDK.CapabilityMotionSensing.CommandId)
  @objc deinit
}
public class CommandSetMotionSensitivity : CocoClientSDK.CommandMotionSensing {
  public init(sensitivityPct: Swift.UInt8)
  @objc deinit
  override public init(commandID: CocoClientSDK.CapabilityMotionSensing.CommandId)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InfoRequestValue : CocoClientSDK.Value {
  @objc deinit
}
public func coco_client_media_stream_receive_cb_t(streamHandle: Swift.UnsafeMutablePointer<CCocoClientSDK.coco_client_media_stream_handle_t>?, channelHandle: Swift.UnsafeMutablePointer<CCocoClientSDK.coco_client_channel_handle_t>?, data: Swift.UnsafeMutableRawPointer?, len: Darwin.size_t, coconetContext: Swift.UnsafeMutableRawPointer?, streamContext: Swift.UnsafeMutableRawPointer?, channelContext: Swift.UnsafeMutableRawPointer?)
@_hasMissingDesignatedInitializers public class TunnelRTSPParameter : Swift.Codable {
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class CommandMeter : CocoClientSDK.Command {
  public var commandID: CocoClientSDK.CapabilityMeter.CommandId? {
    get
  }
  public init(commandID: CocoClientSDK.CapabilityMeter.CommandId)
  @objc deinit
  override public init(cmdID: Swift.Int32)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityOccupancySensing : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_OCCUPANCY_MIN
    case COCO_STD_ATTR_PRESENCE_DETECTED_FLAG
    case COCO_STD_ATTR_OCCUPANCY_FLAG
    case COCO_STD_ATTR_OCCUPANCY_MAX
    case COCO_STD_ATTR_OCCUPANCY_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_OCCUPANCY_TYPE_MIN
    case COCO_STD_OCCUPANCY_TYPE_MAX
    case COCO_STD_CMD_OCCUPANCY_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: CocoClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CommandFireSensing : CocoClientSDK.Command {
  public var commandID: CocoClientSDK.CapabilityFireSensing.CommandId?
  public init(commandID: CocoClientSDK.CapabilityFireSensing.CommandId)
  @objc deinit
  override public init(cmdID: Swift.Int32)
}
public protocol CocoCallbackDelegate {
  func ConnectStatusCallback(network: CocoClientSDK.Network?, coconetStatus: CocoClientSDK.Network.State, context: Swift.UnsafeMutableRawPointer?)
  func LeaveCoconetStatusCallback(coconetStatus: CocoClientSDK.StatusCode, context: Swift.UnsafeMutableRawPointer?)
  func ResourceCallback(resource: CocoClientSDK.Resource?, context: Swift.UnsafeMutableRawPointer?)
  func ResourceCapabilityCallback(capability: CocoClientSDK.Capability?, context: Swift.UnsafeMutableRawPointer?)
  func ResourceAttributeCallback(attribute: CocoClientSDK.Attribute?, context: Swift.UnsafeMutableRawPointer?)
  func NetworkListCallback(networkList: [CocoClientSDK.Network], context: Swift.UnsafeMutableRawPointer?)
  func DeviceMgmtCommandStatusCallback(deviceCommandStatus: CocoClientSDK.DeviceCommandStatus?, context: Swift.UnsafeMutableRawPointer?, cocoNetContext: Swift.UnsafeMutableRawPointer?)
  func InfoRequestCallback(infoRequest: CocoClientSDK.InfoRequest?, context: Swift.UnsafeMutableRawPointer?, cocoNetContext: Swift.UnsafeMutableRawPointer?)
  func InfoResponseCallback(infoResponse: CocoClientSDK.InfoResponse?, cmdContext: Swift.UnsafeMutableRawPointer?, cocoNetContext: Swift.UnsafeMutableRawPointer?)
  func InfoResponseStatusCallback(commandState: CocoClientSDK.StatusCode?, context: Swift.UnsafeMutableRawPointer?)
  func InfoRequestStatusCallback(commandState: CocoClientSDK.StatusCode?, context: Swift.UnsafeMutableRawPointer?)
  func MessageCallback(cocoMessage: CocoClientSDK.Message?, context: Swift.UnsafeMutableRawPointer?, cocoNetContext: Swift.UnsafeMutableRawPointer?)
  func AdvertiseResourceCallback(advertiseResource: CocoClientSDK.AdvertiseResource?, cocoNetContext: Swift.UnsafeMutableRawPointer?)
  func ResourceAddedCallback(resourceList: [CocoClientSDK.Resource], context: Swift.UnsafeMutableRawPointer?)
  func ResourceRemovedCallback(removedResourceInfo: CocoClientSDK.Resource?, context: Swift.UnsafeMutableRawPointer?)
  func ResourceTunnelCommandCallback(commandTunnel: CocoClientSDK.Tunnel?, context: Swift.UnsafeMutableRawPointer?, cocoNetContext: Swift.UnsafeMutableRawPointer?)
  func DeviceInfoCallback(device: CocoClientSDK.Device?, context: Swift.UnsafeMutableRawPointer?)
  func NetworkCommandStatusCallback(networkCMDStatus: CocoClientSDK.NetworkCMDStatus?, context: Swift.UnsafeMutableRawPointer?, cocoNetContext: Swift.UnsafeMutableRawPointer?)
  func FirmwareUpdateCallback(firmwareUpdate: CocoClientSDK.FirmwareUpdate?, context: Swift.UnsafeMutableRawPointer?)
  func ZoneInfoCallback(zone: CocoClientSDK.Zone?, context: Swift.UnsafeMutableRawPointer?)
  func ZoneDeletionCallback(zone: CocoClientSDK.Zone?, context: Swift.UnsafeMutableRawPointer?)
  func SceneInfoCallback(scene: CocoClientSDK.Scene?, context: Swift.UnsafeMutableRawPointer?)
  func SceneDeletionCallback(scene: CocoClientSDK.Scene?, context: Swift.UnsafeMutableRawPointer?)
  func RuleInfoCallback(rule: CocoClientSDK.Rule?, context: Swift.UnsafeMutableRawPointer?)
  func RuleDeletionCallback(rule: CocoClientSDK.Rule?, context: Swift.UnsafeMutableRawPointer?)
  func NodeConnectStatusCallback(network: CocoClientSDK.Network?, nodeId: Swift.UInt32, isOnline: Swift.Bool, nodeType: CocoClientSDK.NodeType?, coconetContext: Swift.UnsafeMutableRawPointer?)
  func NetworkStateChanged(network: CocoClientSDK.Network, state: CocoClientSDK.NetworkDatum)
  func NetworkDataCallback(network: CocoClientSDK.Network, coconetContext: Swift.UnsafeMutableRawPointer?)
  func ResourceCommandStatusCallback(commandStateCB: CocoClientSDK.CommandStateCB?, context: Swift.UnsafeMutableRawPointer?, cocoNetContext: Swift.UnsafeMutableRawPointer?)
}
extension CocoCallbackDelegate {
  public func ConnectStatusCallback(network _: CocoClientSDK.Network?, coconetStatus _: CocoClientSDK.Network.State, context _: Swift.UnsafeMutableRawPointer?)
  public func LeaveCoconetStatusCallback(coconetStatus: CocoClientSDK.StatusCode, context: Swift.UnsafeMutableRawPointer?)
  public func ResourceCallback(resource _: CocoClientSDK.Resource?, context _: Swift.UnsafeMutableRawPointer?)
  public func ResourceCapabilityCallback(capability _: CocoClientSDK.Capability?, context _: Swift.UnsafeMutableRawPointer?)
  public func ResourceAttributeCallback(attribute _: CocoClientSDK.Attribute?, context _: Swift.UnsafeMutableRawPointer?)
  public func ResourceCommandStatusCallback(commandStateCB _: CocoClientSDK.CommandStateCB?, context _: Swift.UnsafeMutableRawPointer?, cocoNetContext _: Swift.UnsafeMutableRawPointer?)
  public func NetworkListCallback(networkList _: [CocoClientSDK.Network], context _: Swift.UnsafeMutableRawPointer?)
  public func DeviceMgmtCommandStatusCallback(deviceCommandStatus _: CocoClientSDK.DeviceCommandStatus?, context _: Swift.UnsafeMutableRawPointer?, cocoNetContext _: Swift.UnsafeMutableRawPointer?)
  public func InfoRequestCallback(infoRequest _: CocoClientSDK.InfoRequest?, context _: Swift.UnsafeMutableRawPointer?, cocoNetContext _: Swift.UnsafeMutableRawPointer?)
  public func InfoResponseCallback(infoResponse _: CocoClientSDK.InfoResponse?, cmdContext _: Swift.UnsafeMutableRawPointer?, cocoNetContext _: Swift.UnsafeMutableRawPointer?)
  public func InfoResponseStatusCallback(commandState _: CocoClientSDK.StatusCode?, context _: Swift.UnsafeMutableRawPointer?)
  public func InfoRequestStatusCallback(commandState _: CocoClientSDK.StatusCode?, context _: Swift.UnsafeMutableRawPointer?)
  public func MessageCallback(cocoMessage _: CocoClientSDK.Message?, context _: Swift.UnsafeMutableRawPointer?, cocoNetContext _: Swift.UnsafeMutableRawPointer?)
  public func AdvertiseResourceCallback(advertiseResource _: CocoClientSDK.AdvertiseResource?, cocoNetContext _: Swift.UnsafeMutableRawPointer?)
  public func ResourceIncludedCallback(resourceList _: [CocoClientSDK.Resource], context _: Swift.UnsafeMutableRawPointer?)
  public func ResourceExcludedCallback(advertiseResource _: CocoClientSDK.AdvertiseResource?, context _: Swift.UnsafeMutableRawPointer?)
  public func ResourceTunnelCallback(commandTunnel _: CocoClientSDK.Tunnel?, context _: Swift.UnsafeMutableRawPointer?, cocoNetContext _: Swift.UnsafeMutableRawPointer?)
  public func DeviceInfoCallback(device _: CocoClientSDK.Device?, context _: Swift.UnsafeMutableRawPointer?)
  public func NetworkCommandStatusCallback(networkCMDStatus _: CocoClientSDK.NetworkCMDStatus?, context _: Swift.UnsafeMutableRawPointer?, cocoNetContext _: Swift.UnsafeMutableRawPointer?)
  public func FirmwareUpdateCallback(firmwareUpdate _: CocoClientSDK.FirmwareUpdate?, context _: Swift.UnsafeMutableRawPointer?)
  public func ZoneInfoCallback(zone _: CocoClientSDK.Zone?, context _: Swift.UnsafeMutableRawPointer?)
  public func ZoneDeletionCallback(zone _: CocoClientSDK.Zone?, context _: Swift.UnsafeMutableRawPointer?)
  public func SceneInfoCallback(scene _: CocoClientSDK.Scene?, context _: Swift.UnsafeMutableRawPointer?)
  public func SceneDeletionCallback(scene _: CocoClientSDK.Scene?, context _: Swift.UnsafeMutableRawPointer?)
  public func RuleInfoCallback(rule _: CocoClientSDK.Rule?, context _: Swift.UnsafeMutableRawPointer?)
  public func RuleDeletionCallback(rule _: CocoClientSDK.Rule?, context _: Swift.UnsafeMutableRawPointer?)
  public func ResourceAddedCallback(resourceList _: [CocoClientSDK.Resource], context _: Swift.UnsafeMutableRawPointer?)
  public func ResourceRemovedCallback(removedResourceInfo _: CocoClientSDK.Resource?, context _: Swift.UnsafeMutableRawPointer?)
  public func ResourceTunnelCommandCallback(commandTunnel _: CocoClientSDK.Tunnel?, context _: Swift.UnsafeMutableRawPointer?, cocoNetContext _: Swift.UnsafeMutableRawPointer?)
  public func NodeConnectStatusCallback(network _: CocoClientSDK.Network?, nodeId _: Swift.UInt32, isOnline _: Swift.Bool, nodeType _: CocoClientSDK.NodeType?, coconetContext _: Swift.UnsafeMutableRawPointer?)
  public func NetworkStateChanged(network _: CocoClientSDK.Network, state _: CocoClientSDK.NetworkDatum)
  public func NetworkDataCallback(network _: CocoClientSDK.Network, coconetContext _: Swift.UnsafeMutableRawPointer?)
  public func ContentInfoCallback(metadata _: Swift.String, contentTime _: Darwin.time_t, nodeId _: Swift.UInt32, coconetContext _: Swift.UnsafeMutableRawPointer?)
  public func NetworkMetadataCallback(metadata _: Swift.String, coconetContext _: Swift.UnsafeMutableRawPointer?)
  public func DataCallback(data _: Swift.String, nodeId _: Swift.UInt32, coconetContext _: Swift.UnsafeMutableRawPointer?)
}
@_hasMissingDesignatedInitializers public class InfoReqContentSearch : CocoClientSDK.InfoRequestValue {
  public enum StorageContentType : Swift.Int32 {
    case COCO_STD_STORAGE_CONTENT_MIN
    case COCO_STD_STORAGE_CONTENT_STREAM
    case COCO_STD_STORAGE_CONTENT_ATTRIBUTE
    case COCO_STD_STORAGE_CONTENT_FILE
    case COCO_STD_STORAGE_CONTENT_MAX
    case COCO_STD_STORAGE_CONTENT_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum UploadTriggerType : Swift.Int32 {
    case COCO_STD_STORAGE_UPLOAD_TRIGGER_MIN
    case COCO_STD_STORAGE_UPLOAD_TRIGGER_USER
    case COCO_STD_STORAGE_UPLOAD_TRIGGER_ATTRB
    case COCO_STD_STORAGE_UPLOAD_TRIGGER_SCENE
    case COCO_STD_STORAGE_UPLOAD_TRIGGER_RULE
    case COCO_STD_STORAGE_UPLOAD_TRIGGER_MAX
    case COCO_STD_STORAGE_UPLOAD_TRIGGER_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum SortByType : Swift.Int32 {
    case COCO_STD_CONTENT_SORT_BY_TYPE_MIN
    case COCO_STD_CONTENT_SORT_BY_TYPE_NONE
    case COCO_STD_CONTENT_SORT_BY_TYPE_CREATED_TIME
    case COCO_STD_CONTENT_SORT_BY_TYPE_MAX
    case COCO_STD_CONTENT_SORT_BY_TYPE_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum SortByOrder : Swift.Int32 {
    case COCO_STD_CONTENT_SORT_BY_ORDER_MIN
    case COCO_STD_CONTENT_SORT_BY_ORDER_NONE
    case COCO_STD_CONTENT_SORT_BY_ORDER_ASCENDING
    case COCO_STD_CONTENT_SORT_BY_ORDER_DESCENDING
    case COCO_STD_CONTENT_SORT_BY_ORDER_MAX
    case COCO_STD_CONTENT_SORT_BY_ORDER_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var reqSearchCount: Swift.UInt8 {
    get
  }
  public var offsetIndex: Swift.UInt32 {
    get
  }
  public var startEpochTime: Darwin.time_t {
    get
  }
  public var endEpochTime: Darwin.time_t {
    get
  }
  public var contentType: CocoClientSDK.InfoReqContentSearch.StorageContentType {
    get
  }
  public var uploadTriggerType: CocoClientSDK.InfoReqContentSearch.UploadTriggerType {
    get
  }
  public var uploadTriggeredUri: CocoClientSDK.UploadTriggerURI? {
    get
  }
  public var sourceUri: CocoClientSDK.SourceURI? {
    get
  }
  public var sortByType: CocoClientSDK.InfoReqContentSearch.SortByType {
    get
  }
  public var sortByOrder: CocoClientSDK.InfoReqContentSearch.SortByOrder {
    get
  }
  public init(reqSearchCount: Swift.UInt8, offsetIndex: Swift.UInt32, startEpochTime: Darwin.time_t, endEpochTime: Darwin.time_t, contentType: CocoClientSDK.InfoReqContentSearch.StorageContentType, uploadTriggerType: CocoClientSDK.InfoReqContentSearch.UploadTriggerType, uploadTriggeredUri: CocoClientSDK.UploadTriggerURI?, sourceUri: CocoClientSDK.SourceURI?, sortByType: CocoClientSDK.InfoReqContentSearch.SortByType, sortByOrder: CocoClientSDK.InfoReqContentSearch.SortByOrder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityHumiditySensing : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_HUMIDITY_MIN
    case COCO_STD_ATTR_CURRENT_REL_HUMIDITY_PCT
    case COCO_STD_ATTR_HUMIDITY_MAX
    case COCO_STD_ATTR_HUMIDITY_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_HUMIDITY_MIN
    case COCO_STD_CMD_FETCH_RELATIVE_HUMIDITY_PCT
    case COCO_STD_CMD_HUMIDITY_MAX
    case COCO_STD_CMD_﻿HUMIDITY_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: CocoClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityDlock : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_LOCK_MIN
    case COCO_STD_ATTR_LOCKED_FLAG
    case COCO_STD_ATTR_LOCK_USER_ID_ARR
    case COCO_STD_ATTR_LOCK_PIN_CODE_ARR
    case COCO_STD_ATTR_LOCK_USER_STATUS_ARR
    case COCO_STD_ATTR_LOCK_USER_TYPE_ARR
    case COCO_STD_ATTR_LOCK_MAX
    case COCO_STD_ATTR_LOCK_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_DOOR_LOCK_MIN
    case COCO_STD_CMD_LOCK
    case COCO_STD_CMD_UNLOCK
    case COCO_STD_CMD_TOGGLE_DOOR_LOCK
    case COCO_STD_CMD_SET_PIN_CODE
    case COCO_STD_CMD_CLEAR_PIN_CODE
    case COCO_STD_CMD_SET_USER_STATUS
    case COCO_STD_CMD_SET_USER_TYPE
    case COCO_STD_CMD_GET_LOCK_STATUS
    case COCO_STD_CMD_GET_PIN_CODE
    case COCO_STD_CMD_GET_USER_STATUS
    case COCO_STD_CMD_GET_USER_TYPE
    case COCO_STD_CMD_DOOR_LOCK_MAX
    case COCO_STD_CMD_LOCK_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum UserStatus : Swift.Int32, Swift.Codable {
    case COCO_STD_DL_USER_STATUS_MIN
    case COCO_STD_DL_STATUS_AVAILABLE
    case COCO_STD_DL_STATUS_ENABLED
    case COCO_STD_DL_STATUS_DISABLED
    case COCO_STD_DL_USER_STATUS_MAX
    case COCO_STD_LOCK_USER_STATUS_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum UserType : Swift.Int32, Swift.Codable {
    case COCO_STD_DL_USER_TYPE_MIN
    case COCO_STD_DL_UNRESTRICTED_USER
    case COCO_STD_DL_YEAR_DAY_SCH_USER
    case COCO_STD_DL_WEEK_DAY_SCH_USER
    case COCO_STD_DL_MASTER_USER
    case COCO_STD_DL_NON_ACCESS_USER
    case COCO_STD_DL_USER_TYPE_MAX
    case COCO_STD_LOCK_USER_TYPE_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: CocoClientSDK.CommandIDProtocol?) -> Swift.Bool
  public func lock(pinCode: Swift.String, commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func unlock(pinCode: Swift.String, commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func setPin(userId: Swift.UInt32, userStatus: CocoClientSDK.CapabilityDlock.UserStatus, userType: CocoClientSDK.CapabilityDlock.UserType, pinRfidCode: Swift.String, commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func clearPin(userId: Swift.UInt32, commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func lockToggel(pinRfidCode: Swift.String, commandContext: Swift.UnsafeMutableRawPointer?) throws
  @objc deinit
}
public class CommandResource {
  public init(resourceEui: Swift.String?)
  @objc deinit
}
public class CommandAddResource : CocoClientSDK.CommandResource {
  public init(resourceEui: Swift.String?, protocolId: CocoClientSDK.`Protocol`, resourceMetadata: Swift.String?, paramArr: [CocoClientSDK.Parameter])
  @objc deinit
  override public init(resourceEui: Swift.String?)
}
public class CommandRemoveResource : CocoClientSDK.CommandResource {
  public init(resourceEui: Swift.String, paramArr: [CocoClientSDK.Parameter])
  @objc deinit
  override public init(resourceEui: Swift.String?)
}
public class CommandForceRemoveResource : CocoClientSDK.CommandResource {
  public init(resourceEui: Swift.String)
  @objc deinit
  override public init(resourceEui: Swift.String?)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityContactSensing : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_CONTACT_SENSING_MIN
    case COCO_STD_ATTR_CONTACT_1_OPEN_FLAG
    case COCO_STD_ATTR_CONTACT_2_OPEN_FLAG
    case COCO_STD_ATTR_CONTACT_SENSING_MAX
    case COCO_STD_ATTR_CONTACT_SENSING_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable {
    case COCO_STD_CMD_CONTACT_SENSING_MIN
    case COCO_STD_CMD_CONTACT_SENSING_ENABLE
    case COCO_STD_CMD_CONTACT_SENSING_DISABLE
    case COCO_STD_CMD_CONTACT_SENSING_MAX
    case COCO_STD_CMD_CONTACT_SENSING_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: CocoClientSDK.CommandIDProtocol?) -> Swift.Bool
  public func EnableContactSensing(commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func DisableContactSensing(commandContext: Swift.UnsafeMutableRawPointer?) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InfoRespAvailListenPort : CocoClientSDK.InfoResponseValue {
  public var portArr: [Swift.UInt16] {
    get
  }
  public init(portArr: [Swift.UInt16])
  @objc deinit
}
@_inheritsConvenienceInitializers public class CapabilityImageCtrl : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_IMAGE_CTRL_MIN
    case COCO_STD_ATTR_IMAGE_CTRL_AF_MODE_FLAG
    case COCO_STD_ATTR_IMAGE_CTRL_AE_MODE_FLAG
    case COCO_STD_ATTR_IMAGE_CTRL_AWB_MODE_FLAG
    case COCO_STD_ATTR_IMAGE_CTRL_ZOOM_TYPE
    case COCO_STD_ATTR_IMAGE_CTRL_IRCUT_MODE_TYPE
    case COCO_STD_ATTR_IMAGE_CTRL_IMG_PRESET_TYPE
    case COCO_STD_ATTR_IMAGE_CTRL_IMG_HUE_PCT
    case COCO_STD_ATTR_IMAGE_CTRL_IMG_SATURATION_PCT
    case COCO_STD_ATTR_IMAGE_CTRL_IMG_CONTRAST_PCT
    case COCO_STD_ATTR_IMAGE_CTRL_IMG_BRIGHTNESS_PCT
    case COCO_STD_ATTR_IMAGE_CTRL_IMG_FLIP_FLAG
    case COCO_STD_ATTR_IMAGE_CTRL_IMG_MIRROR_FLAG
    case COCO_STD_ATTR_IMAGE_CTRL_IMG_TEXT
    case COCO_STD_ATTR_IMAGE_CTRL_IMG_TEXT_XPOSITION
    case COCO_STD_ATTR_IMAGE_CTRL_IMG_TEXT_YPOSITION
    case COCO_STD_ATTR_IMAGE_CTR_MAX
    case COCO_STD_ATTR_IMAGE_CTRL_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_IMAGE_MIN
    case COCO_STD_CMD_IMAGE_SET_AF_MODE
    case COCO_STD_CMD_IMAGE_SET_AE_MODE
    case COCO_STD_CMD_IMAGE_SET_AWB_MODE
    case COCO_STD_CMD_IMAGE_SET_ZOOM
    case COCO_STD_CMD_IMAGE_SET_IRCUT_MODE
    case COCO_STD_CMD_IMAGE_SET_PRESET
    case COCO_STD_CMD_IMAGE_SET_HUE
    case COCO_STD_CMD_IMAGE_SET_SATURATION
    case COCO_STD_CMD_IMAGE_SET_CONTRAST
    case COCO_STD_CMD_IMAGE_SET_BRIGHTNESS
    case COCO_STD_CMD_IMAGE_SET_FLIP
    case COCO_STD_CMD_IMAGE_SET_MIRROR
    case COCO_STD_CMD_IMAGE_SET_TEXT
    case COCO_STD_CMD_IMAGE_MAX
    case COCO_STD_CMD_IMAGE_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public func imageSetText(text: Swift.String, xPosition: Swift.UInt8, yPosition: Swift.UInt8, commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func imageSetMirror(onFlag: Swift.Bool, commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func imageSetFlip(onFlag: Swift.Bool, commandContext: Swift.UnsafeMutableRawPointer?) throws
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  override public init(capabilityId: Swift.Int32, parent: CocoClientSDK.Resource)
}
open class Scene : Swift.Hashable, Swift.Codable {
  public var parentNetwork: CocoClientSDK.Network? {
    get
  }
  public var sceneId: Swift.UInt16 {
    get
  }
  public var sceneName: Swift.String {
    get
  }
  public var metadata: Swift.String? {
    get
  }
  public var actionMap: [Swift.Int : CocoClientSDK.ResourceAction] {
    get
  }
  public static func == (lhs: CocoClientSDK.Scene, rhs: CocoClientSDK.Scene) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  public init(sceneId: Swift.UInt16, parent: CocoClientSDK.Network?)
  open func setName(name: Swift.String)
  open func setMetadata(metadata: Swift.String?)
  open func addToActionMap(resourceAction: CocoClientSDK.ResourceAction)
  open func removeFromActionMap(resourceActionIndex: Swift.Int)
  open func clearActionMap()
  open func setParent(network: CocoClientSDK.Network?)
  public func update(name: Swift.String, timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func update(metadata: Swift.String, timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func execute(commandContext: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func addResourceActions(resourceActions: [CocoClientSDK.ResourceAction], timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func updateResourceActions(resourceActions: [CocoClientSDK.ResourceAction], timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func saveResourceActions(resourceActions: [CocoClientSDK.ResourceAction], timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func removeResourceActions(resourceActions: [CocoClientSDK.ResourceAction], timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  @objc deinit
  open var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class ResourceAction : Swift.Codable {
  public var id: Swift.UInt16 {
    get
  }
  public var capability: CocoClientSDK.Capability? {
    get
  }
  public var command: CocoClientSDK.Command? {
    get
  }
  public init(capability: CocoClientSDK.Capability?, command: CocoClientSDK.Command?)
  open func setCapability(capability: CocoClientSDK.Capability)
  open func setCommand(command: CocoClientSDK.Command)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol Creator {
  func createNetwork(networkId: Swift.String) -> CocoClientSDK.Network
  func createDevice(deviceNodeId: Swift.UInt32, parent: CocoClientSDK.Network) -> CocoClientSDK.Device
  func createZone(zoneId: Swift.UInt16, parent: CocoClientSDK.Network) -> CocoClientSDK.Zone
  func createScene(sceneId: Swift.UInt16, parent: CocoClientSDK.Network) -> CocoClientSDK.Scene
  func createResource(eui: Swift.String, parentDevice: CocoClientSDK.Device) -> CocoClientSDK.Resource
  func createCapability(capabilityId: Swift.Int32, parent: CocoClientSDK.Resource) -> CocoClientSDK.Capability
  func createAttribute(attributeId: Swift.Int32, parent: CocoClientSDK.Capability) -> CocoClientSDK.Attribute
}
extension Creator {
  public func createNetwork(networkId: Swift.String) -> CocoClientSDK.Network
  public func createDevice(deviceNodeId: Swift.UInt32, parent: CocoClientSDK.Network) -> CocoClientSDK.Device
  public func createZone(zoneId: Swift.UInt16, parent: CocoClientSDK.Network) -> CocoClientSDK.Zone
  public func createScene(sceneId: Swift.UInt16, parent: CocoClientSDK.Network) -> CocoClientSDK.Scene
  public func createResource(eui: Swift.String, parentDevice: CocoClientSDK.Device) -> CocoClientSDK.Resource
  public func createCapability(capabilityId: Swift.Int32, parent: CocoClientSDK.Resource) -> CocoClientSDK.Capability
  public func createAttribute(attributeId: Swift.Int32, parent: CocoClientSDK.Capability) -> CocoClientSDK.Attribute
}
@_hasMissingDesignatedInitializers public class CommandTunnel : CocoClientSDK.Command {
  public enum Status : Swift.Int32, Swift.Codable {
    case COCO_TUNNEL_STATUS_MIN
    case COCO_TUNNEL_OPENING
    case COCO_TUNNEL_OPENED
    case COCO_TUNNEL_REOPENED
    case COCO_TUNNEL_OPEN_FAILED
    case COCO_TUNNEL_CLOSED
    case COCO_TUNNEL_CLOSE_FAILED
    case COCO_TUNNEL_TIMEOUT
    case COCO_TUNNEL_MAX_CLIENT_REACHED
    case COCO_TUNNEL_STATUS_MAX
    case COCO_TUNNEL_STATUS_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public init(commandID: CocoClientSDK.CapabilityTunnel.CommandId)
  @objc deinit
  override public init(cmdID: Swift.Int32)
}
@_hasMissingDesignatedInitializers public class CommandTunnelOpen : CocoClientSDK.CommandTunnel {
  public init(ipVersion: CocoClientSDK.CapabilityTunnel.IPVersion, tunnelProtocol: CocoClientSDK.CapabilityTunnel.TunnelProtocol, tunnelType: CocoClientSDK.CapabilityTunnel.TunnelType, transportType: CocoClientSDK.CapabilityTunnel.TunnelTransport, protocolParams: CocoClientSDK.TunnelRTSPParameter)
  @objc deinit
  override public init(commandID: CocoClientSDK.CapabilityTunnel.CommandId)
}
@_hasMissingDesignatedInitializers public class CommandTunnelOpenTCP : CocoClientSDK.CommandTunnelOpen {
  public init(listeningHostName: Swift.String, listeningPort: Swift.UInt16, ipVersion: CocoClientSDK.CapabilityTunnel.IPVersion, tunnelProtocol: CocoClientSDK.CapabilityTunnel.TunnelProtocol = .COCO_STD_TUNNEL_PROTOCOL_RTSP, tunnelType: CocoClientSDK.CapabilityTunnel.TunnelType)
  @objc deinit
  override public init(ipVersion: CocoClientSDK.CapabilityTunnel.IPVersion, tunnelProtocol: CocoClientSDK.CapabilityTunnel.TunnelProtocol, tunnelType: CocoClientSDK.CapabilityTunnel.TunnelType, transportType: CocoClientSDK.CapabilityTunnel.TunnelTransport, protocolParams: CocoClientSDK.TunnelRTSPParameter)
}
@_hasMissingDesignatedInitializers public class CommandTunnelOpenUDP : CocoClientSDK.CommandTunnelOpen {
  public init(fwdHostName: Swift.String, fwdPort: Swift.UInt16, ipVersion: CocoClientSDK.CapabilityTunnel.IPVersion, tunnelProtocol: CocoClientSDK.CapabilityTunnel.TunnelProtocol = .COCO_STD_TUNNEL_PROTOCOL_RTSP, tunnelType: CocoClientSDK.CapabilityTunnel.TunnelType)
  @objc deinit
  override public init(ipVersion: CocoClientSDK.CapabilityTunnel.IPVersion, tunnelProtocol: CocoClientSDK.CapabilityTunnel.TunnelProtocol, tunnelType: CocoClientSDK.CapabilityTunnel.TunnelType, transportType: CocoClientSDK.CapabilityTunnel.TunnelTransport, protocolParams: CocoClientSDK.TunnelRTSPParameter)
}
@_hasMissingDesignatedInitializers public class CommandTunnelClose : CocoClientSDK.CommandTunnel {
  public var tunnelHandle: Swift.OpaquePointer? {
    get
  }
  public init(tunnelHandle: Swift.OpaquePointer)
  @objc deinit
  override public init(commandID: CocoClientSDK.CapabilityTunnel.CommandId)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityNetworkConfiguration : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_NW_CONFIG_MIN
    case COCO_STD_ATTR_NW_CONFIG_RSSI
    case COCO_STD_ATTR_NW_CONFIG_MAX
    case COCO_STD_ATTR_NW_CONFIG_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CommandDlock : CocoClientSDK.Command {
  public var commandID: CocoClientSDK.CapabilityDlock.CommandId? {
    get
  }
  public init(commandID: CocoClientSDK.CapabilityDlock.CommandId)
  @objc deinit
  override public init(cmdID: Swift.Int32)
}
@_hasMissingDesignatedInitializers public class LockDoor : CocoClientSDK.CommandDlock {
  public var pinCode: Swift.String {
    get
  }
  public init(pinCode: Swift.String)
  @objc deinit
  override public init(commandID: CocoClientSDK.CapabilityDlock.CommandId)
}
@_hasMissingDesignatedInitializers public class UnLockDoor : CocoClientSDK.CommandDlock {
  public var pinCode: Swift.String {
    get
  }
  public var timeOut: Swift.UInt32 {
    get
  }
  public init(pinCode: Swift.String)
  public init(pinCode: Swift.String, timeOut: Swift.UInt32)
  @objc deinit
  override public init(commandID: CocoClientSDK.CapabilityDlock.CommandId)
}
@_hasMissingDesignatedInitializers public class LockToggel : CocoClientSDK.CommandDlock {
  public var pinRfidCode: Swift.String {
    get
  }
  public init(pinRfidCode: Swift.String)
  @objc deinit
  override public init(commandID: CocoClientSDK.CapabilityDlock.CommandId)
}
@_hasMissingDesignatedInitializers public class LockSetPin : CocoClientSDK.CommandDlock {
  public var userId: Swift.UInt32 {
    get
  }
  public var userStatus: CocoClientSDK.CapabilityDlock.UserStatus {
    get
  }
  public var userType: CocoClientSDK.CapabilityDlock.UserType {
    get
  }
  public var pinRfidCode: Swift.String {
    get
  }
  public init(userId: Swift.UInt32, userStatus: CocoClientSDK.CapabilityDlock.UserStatus, userType: CocoClientSDK.CapabilityDlock.UserType, pinRfidCode: Swift.String)
  @objc deinit
  override public init(commandID: CocoClientSDK.CapabilityDlock.CommandId)
}
@_hasMissingDesignatedInitializers public class LockClearPin : CocoClientSDK.CommandDlock {
  public var userId: Swift.UInt32 {
    get
  }
  public init(userId: Swift.UInt32)
  @objc deinit
  override public init(commandID: CocoClientSDK.CapabilityDlock.CommandId)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityTunnel : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_TUNNEL_MIN
    case COCO_STD_ATTR_TUNNEL_SUPPORTED_TRANSPORT_TYPE_COUNT
    case COCO_STD_ATTR_TUNNEL_SUPPORTED_TRANSPORT_TYPE_ARR
    case COCO_STD_ATTR_TUNNEL_SUPPORTED_PROTOCOL_COUNT
    case COCO_STD_ATTR_TUNNEL_SUPPORTED_PROTOCOL_ARR
    case COCO_STD_ATTR_TUNNEL_SUPPORTED_PROTOCOL_METADATA_ARR
    case COCO_STD_ATTR_TUNNEL_CURRENT_ACTIVE_CLIENTS_COUNT
    case COCO_STD_ATTR_TUNNEL_CURRENT_ACTIVE_CLIENTS_ARR
    case COCO_STD_ATTR_TUNNEL_MAX_ACTIVE_CLIENTS_COUNT
    case COCO_STD_ATTR_TUNNEL_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum IPVersion : Swift.Int32, Swift.Codable {
    case COCO_STD_TUNNEL_IP_VER_MIN
    case COCO_STD_TUNNEL_IP_VER_4
    case COCO_STD_TUNNEL_IP_VER_6
    case COCO_STD_TUNNEL_IP_VER_MAX
    case COCO_STD_TUNNEL_IP_VER_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum TunnelTransport : Swift.Int32, Swift.Codable {
    case COCO_STD_TUNNEL_TRANSPORT_MIN
    case COCO_STD_TUNNEL_TRANSPORT_TCP
    case COCO_STD_TUNNEL_TRANSPORT_UDP
    case COCO_STD_TUNNEL_TRANSPORT_MAX
    case COCO_STD_TUNNEL_TRANSPORT_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum TunnelType : Swift.Int32, Swift.Codable {
    case COCO_STD_TUNNEL_TYPE_MIN
    case COCO_STD_TUNNEL_TYPE_LISTEN
    case COCO_STD_TUNNEL_TYPE_CONNECT
    case COCO_STD_TUNNEL_TYPE_MAX
    case COCO_STD_TUNNEL_TYPE_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum TunnelProtocol : Swift.Int32, Swift.Codable {
    case COCO_STD_TUNNEL_PROTOCOL_MIN
    case COCO_STD_TUNNEL_PROTOCOL_RTSP
    case COCO_STD_TUNNEL_PROTOCOL_MAX
    case COCO_STD_TUNNEL_PROTOCOL_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_TUNNEL_MIN
    case COCO_STD_CMD_TUNNEL_OPEN
    case COCO_STD_CMD_TUNNEL_CLOSE
    case COCO_STD_CMD_TUNNEL_MAX
    case COCO_STD_CMD_TUNNEL_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public var rawValue: Swift.Int32 {
      get
    }
    public init?(rawValue: Swift.Int32)
  }
  public func open_tunnel(commandTunnel: CocoClientSDK.CommandTunnel, timeoutMs: Swift.UInt32, context: Swift.UnsafeMutableRawPointer?)
  public func close_tunnel(tunnelHandle: Swift.OpaquePointer?, timeoutMs: Swift.UInt32)
  override public func supports(commandId: CocoClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
public class StorageContentMetadata {
  public var contentId: Swift.UInt64 {
    get
  }
  public var sourceUri: CocoClientSDK.SourceURI {
    get
  }
  public var contentType: CocoClientSDK.InfoReqContentSearch.StorageContentType {
    get
  }
  public var uploadTriggerType: CocoClientSDK.InfoReqContentSearch.UploadTriggerType {
    get
  }
  public var uploadTriggeredUri: CocoClientSDK.UploadTriggerURI {
    get
  }
  public var size: Swift.UInt32 {
    get
  }
  public var staticLink: Swift.String? {
    get
  }
  public var userMetaData: Swift.String? {
    get
  }
  public var createdTimestamp: Swift.UInt64 {
    get
  }
  public var contentDuration: Swift.UInt32 {
    get
  }
  public init(contentId: Swift.UInt64, sourceUri: CocoClientSDK.SourceURI, contentType: Swift.Int32, uploadTriggerType: Swift.Int32, uploadTriggeredUri: CocoClientSDK.UploadTriggerURI, size: Swift.UInt32, staticLink: Swift.String?, userMetaData: Swift.String?, createdTimestamp: Swift.UInt64, contentDuration: Swift.UInt32)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InfoReqContentPlayback : CocoClientSDK.InfoRequestValue {
  public enum StreamProtocol : Swift.Int32, Swift.Codable {
    case COCO_STD_STREAM_PROTOCOL_TYPE_MIN
    case COCO_STD_STREAM_PROTOCOL_TYPE_DASH
    case COCO_STD_STREAM_PROTOCOL_TYPE_HLS
    case COCO_STD_STREAM_PROTOCOL_TYPE_HDS
    case COCO_STD_STREAM_PROTOCOL_TYPE_SMOOTH
    case COCO_STD_STREAM_PROTOCOL_TYPE_MAX
    case COCO_STD_STREAM_PROTOCOL_TYPE_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var contentId: Swift.UInt64 {
    get
  }
  public var streamProtocolType: CocoClientSDK.InfoReqContentPlayback.StreamProtocol {
    get
  }
  public init(contentId: Swift.UInt64, streamProtocolType: CocoClientSDK.InfoReqContentPlayback.StreamProtocol)
  @objc deinit
}
public func coco_client_snapshot_status_cb(filePath: Swift.UnsafePointer<Swift.Int8>?, status: CCocoClientSDK.coco_client_snapshot_status_t, coconetContext: Swift.UnsafeMutableRawPointer?, snapshotContext: Swift.UnsafeMutableRawPointer?)
public class CommandMotorCtrl : CocoClientSDK.Command {
  public var degree: Swift.UInt16 {
    get
  }
  public var speed: Swift.Int32 {
    get
  }
  public var commandID: CocoClientSDK.CapabilityMotorCtrl.CommandId? {
    get
  }
  public init(commandID: CocoClientSDK.CapabilityMotorCtrl.CommandId, degree: Swift.UInt16, speed: Swift.Int32)
  @objc deinit
  override public init(cmdID: Swift.Int32)
}
public class MotorPan : CocoClientSDK.CommandMotorCtrl {
  public var direction: CocoClientSDK.CapabilityMotorCtrl.PanDirection {
    get
  }
  public init(direction: CocoClientSDK.CapabilityMotorCtrl.PanDirection, degree: Swift.UInt16, speed: Swift.Int32)
  @objc deinit
  override public init(commandID: CocoClientSDK.CapabilityMotorCtrl.CommandId, degree: Swift.UInt16, speed: Swift.Int32)
}
public class MotoeTilt : CocoClientSDK.CommandMotorCtrl {
  public var direction: CocoClientSDK.CapabilityMotorCtrl.TiltDirection {
    get
  }
  public init(direction: CocoClientSDK.CapabilityMotorCtrl.TiltDirection, degree: Swift.UInt16, speed: Swift.Int32)
  @objc deinit
  override public init(commandID: CocoClientSDK.CapabilityMotorCtrl.CommandId, degree: Swift.UInt16, speed: Swift.Int32)
}
public class CommandStorageCtrl : CocoClientSDK.Command {
  public init(commandId: CocoClientSDK.CapabilityStorageControl.CommandId, offset: Swift.UInt32, size: Swift.UInt32)
  @objc deinit
  override public init(cmdID: Swift.Int32)
}
public class StorageUpload : CocoClientSDK.CommandStorageCtrl {
  public init(contentType: Swift.Int32, uploadTriggerType: Swift.Int32, uploadTriggeredUri: CocoClientSDK.UploadTriggerURI, channelPortArr: [Swift.UInt16], appendFlag: Swift.Int32, offset: Swift.UInt32, size: Swift.UInt32, channelDescriptionArr: [Swift.String], createdTimestamp: Darwin.time_t)
  @objc deinit
  override public init(commandId: CocoClientSDK.CapabilityStorageControl.CommandId, offset: Swift.UInt32, size: Swift.UInt32)
}
public class StorageDownload : CocoClientSDK.CommandStorageCtrl {
  public init(contentId: Swift.UInt64, channelPort: Swift.UInt16, offset: Swift.UInt32, size: Swift.UInt32)
  @objc deinit
  override public init(commandId: CocoClientSDK.CapabilityStorageControl.CommandId, offset: Swift.UInt32, size: Swift.UInt32)
}
public class Parameter {
  public enum Key : Swift.Int32 {
    case COCO_STD_PARAM_MIN
    case COCO_STD_PARAM_USER_DEFINED
    case COCO_STD_PARAM_USERNAME
    case COCO_STD_PARAM_PASSWORD
    case COCO_STD_PARAM_PIN
    case COCO_STD_PARAM_OTP
    case COCO_STD_PARAM_INSTALL_CODE
    case COCO_STD_PARAM_CSA
    case COCO_STD_PARAM_DSK
    case COCO_STD_PARAM_RESRC_NAME
    case COCO_STD_PARAM_AVAIL_LISTEN_PORT
    case COCO_STD_PARAM_CONTENT_SEARCH
    case COCO_STD_PARAM_CONTENT_PLAYBACK
    case COCO_STD_PARAM_MAX
    case COCO_STD_PARAM_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var key: CocoClientSDK.Parameter.Key? {
    get
  }
  public var value: CocoClientSDK.Value? {
    get
  }
  public init(key: CocoClientSDK.Parameter.Key?, value: CocoClientSDK.Value?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InfoRespContentPlayback : CocoClientSDK.InfoResponseValue {
  public enum PlaybackReqError : Swift.Int32, Swift.Codable {
    case COCO_STD_CONTENT_PLAYBACK_REQ_ERROR_MIN
    case COCO_STD_CONTENT_PLAYBACK_REQ_ERROR_NONE
    case COCO_STD_CONTENT_PLAYBACK_REQ_ERROR_TIMEOUT
    case COCO_STD_CONTENT_PLAYBACK_REQ_ERROR_NOT_FOUND
    case COCO_STD_CONTENT_PLAYBACK_REQ_ERROR_PROT_NOT_SUPPORTED
    case COCO_STD_CONTENT_PLAYBACK_REQ_ERROR_INTERNAL
    case COCO_STD_CONTENT_PLAYBACK_REQ_ERROR_MAX
    case COCO_STD_CONTENT_PLAYBACK_REQ_ERROR_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var streamProtocolType: CocoClientSDK.InfoReqContentPlayback.StreamProtocol {
    get
  }
  public var playbackUrl: Swift.String? {
    get
  }
  public var contentPlaybackReqError: CocoClientSDK.InfoRespContentPlayback.PlaybackReqError {
    get
  }
  public init(streamProtocolType: CocoClientSDK.InfoReqContentPlayback.StreamProtocol, contentPlaybackReqError: CocoClientSDK.InfoRespContentPlayback.PlaybackReqError)
  @objc deinit
}
public class CommandStationaryPosition : CocoClientSDK.Command {
  public var commandId: CocoClientSDK.CapabilityStationaryPosition.CommandId {
    get
  }
  public init(commandId: CocoClientSDK.CapabilityStationaryPosition.CommandId)
  @objc deinit
  override public init(cmdID: Swift.Int32)
}
public class CommandSetStationaryPosition : CocoClientSDK.CommandStationaryPosition {
  public init(locationId: Swift.String, lotId: Swift.String, xCoordinate: Swift.Double, yCoordinate: Swift.Double, environmentalFactor: Swift.UInt32)
  public func getCStructure() -> Swift.UnsafeMutablePointer<CCocoClientSDK.coco_std_cmd_stationary_position_set_device_loc_t>
  public static func getSwiftObject(stationaryPositionCmd: CCocoClientSDK.coco_std_cmd_stationary_position_set_device_loc_t) -> CocoClientSDK.CommandSetStationaryPosition
  @objc deinit
  override public init(commandId: CocoClientSDK.CapabilityStationaryPosition.CommandId)
}
@_hasMissingDesignatedInitializers public class Rule : Swift.Hashable, Swift.Codable {
  public var Id: Swift.UInt16 {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var resourceConditions: [CocoClientSDK.ResourceCondition]? {
    get
  }
  public var scheduleConditions: [CocoClientSDK.ScheduleCondition]? {
    get
  }
  public var resourceActions: [CocoClientSDK.ResourceAction]? {
    get
  }
  public var sceneActions: [CocoClientSDK.SceneAction]? {
    get
  }
  public var parent: CocoClientSDK.Network? {
    get
  }
  public static func == (lhs: CocoClientSDK.Rule, rhs: CocoClientSDK.Rule) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  open func setName(name: Swift.String?)
  open func setResourceConditions(resourceConditions: [CocoClientSDK.ResourceCondition]?)
  open func setScheduleConditions(scheduleConditions: [CocoClientSDK.ScheduleCondition]?)
  open func setResourceActions(resourceActions: [CocoClientSDK.ResourceAction])
  open func setSceneActions(sceneActions: [CocoClientSDK.SceneAction])
  open func setparent(parent: CocoClientSDK.Network?)
  public func update(name: Swift.String, timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func saveRuleSetting(resourceActions: [CocoClientSDK.ResourceAction], timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func removeResourceActions(resourceActions: [CocoClientSDK.ResourceAction], timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers open class SceneAction : Swift.Hashable, Swift.Codable {
  public static func == (lhs: CocoClientSDK.SceneAction, rhs: CocoClientSDK.SceneAction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  open func encode(to encoder: Swift.Encoder) throws
  open var hashValue: Swift.Int {
    get
  }
}
public class ResourceCondition : Swift.Hashable, Swift.Codable {
  public var ruleResCondId: Swift.UInt16 {
    get
  }
  public var attribute: CocoClientSDK.Attribute? {
    get
  }
  public var operatorType: CocoClientSDK.ResourceCondition.OperatorType? {
    get
  }
  public var ruleValue: Any? {
    get
  }
  public var condDurationMs: Swift.UInt32? {
    get
  }
  public enum OperatorType : Swift.Int32, Swift.Codable {
    case COCO_STD_OPERATOR_MIN
    case COCO_STD_OPERATOR_EQUAL_TO
    case COCO_STD_OPERATOR_NOT_EQUAL_TO
    case COCO_STD_OPERATOR_GRTR_THAN
    case COCO_STD_OPERATOR_GRTR_THAN_EQUAL_TO
    case COCO_STD_OPERATOR_LESS_THAN
    case COCO_STD_OPERATOR_LESS_THAN_EQUAL_TO
    case COCO_STD_OPERATOR_MAX
    case COCO_STD_OPERATOR_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public static func == (lhs: CocoClientSDK.ResourceCondition, rhs: CocoClientSDK.ResourceCondition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public init(ruleResCondId: Swift.UInt16)
  open func setAttributeID(attribute: CocoClientSDK.Attribute)
  open func setOperatorId(operatorType: CocoClientSDK.ResourceCondition.OperatorType)
  open func setRuleValue(ruleValue: Any)
  open func setCondDurationMs(condDurationMs: Swift.UInt32)
  public func getCStrucuture() -> Swift.UnsafeMutablePointer<CCocoClientSDK.coco_std_rule_resrc_condn_t>
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers open class ScheduleCondition : Swift.Hashable, Swift.Codable {
  public var id: Swift.UInt16 {
    get
  }
  public var type: CocoClientSDK.ScheduleCondition.ScheduleType? {
    get
  }
  public var month: Swift.UInt8? {
    get
  }
  public var dayOfMonth: Swift.UInt8? {
    get
  }
  public var week: Swift.UInt8? {
    get
  }
  public var dayOfWeek: Swift.UInt8? {
    get
  }
  public var date: Swift.String? {
    get
  }
  public var time: Swift.String? {
    get
  }
  public var expiryTime: Swift.String? {
    get
  }
  public var parentRule: CocoClientSDK.Rule? {
    get
  }
  public enum ScheduleType : Swift.Int32, Swift.Codable {
    case COCO_STD_RULE_SCH_TYPE_MIN
    case COCO_STD_SCH_ONETIME
    case COCO_STD_SCH_DAILY
    case COCO_STD_SCH_WEEKLY
    case COCO_STD_SCH_MONTHLY
    case COCO_STD_SCH_YEARLY
    case COCO_STD_RULE_SCH_TYPE_MAX
    case COCO_STD_RULE_SCH_TYPE_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public static func == (lhs: CocoClientSDK.ScheduleCondition, rhs: CocoClientSDK.ScheduleCondition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  open func setType(type: CocoClientSDK.ScheduleCondition.ScheduleType)
  open func setMonth(month: Swift.UInt8)
  open func setDayOfMonth(dayOfMonth: Swift.UInt8)
  open func setWeek(week: Swift.UInt8)
  open func setDayOfWeek(dayOfWeek: Swift.UInt8)
  open func setDate(date: Swift.String)
  open func setTime(time: Swift.String)
  open func setExpiryTime(time: Swift.String)
  open func setParentRule(parentRule: CocoClientSDK.Rule)
  public func getCStructure() -> Swift.UnsafeMutablePointer<CCocoClientSDK.coco_std_rule_sched_condn_t>
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  open func encode(to encoder: Swift.Encoder) throws
  open var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class InfoReqAvailListenPort : CocoClientSDK.InfoRequestValue {
  public var portCount: Swift.UInt8 {
    get
  }
  public var transportType: CocoClientSDK.CapabilityTunnel.TunnelTransport {
    get
  }
  public var consecutivePort: Swift.Bool {
    get
  }
  public init(portCount: Swift.UInt8, transportType: CocoClientSDK.CapabilityTunnel.TunnelTransport, consecutivePort: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityKeyPressSensing : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_KEYPRESS_MIN
    case COCO_STD_ATTR_KEYPRESS_SCENE_ID
    case COCO_STD_ATTR_KEYPRESS_SCENE_KEY
    case COCO_STD_ATTR_KEYPRESS_DISARM_FLAG
    case COCO_STD_ATTR_KEYPRESS_ARM_DAY_FLAG
    case COCO_STD_ATTR_KEYPRESS_ARM_NIGHT_FLAG
    case COCO_STD_ATTR_KEYPRESS_ARM_ALL_FLAG
    case COCO_STD_ATTR_KEYPRESS_PANIC_FLAG
    case COCO_STD_ATTR_KEYPRESS_EMERGENCY_FLAG
    case COCO_STD_ATTR_KEYPRESS_FALL_TRIGGER_FLAG
    case COCO_STD_ATTR_KEYPRESS_ACTIVATED_COMBO_ID
    case COCO_STD_ATTR_KEYPRESS_COMBO_NAME_ARR
    case COCO_STD_ATTR_KEYPRESS_MAX
    case COCO_STD_ATTR_KEYPRESS_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_KEYPRESS_MIN
    case COCO_STD_CMD_KEYPRESS_SET_COMBO_NAME
    case COCO_STD_CMD_KEYPRESS_MAX
    case COCO_STD_CMD_﻿KEYPRESS_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum KeypressScene : Swift.Int32, Swift.Codable {
    case COCO_STD_KEYPRESS_SCENE_MIN
    case COCO_STD_KEYPRESS_SCENE_SINGLE
    case COCO_STD_KEYPRESS_SCENE_DOUBLE
    case COCO_STD_KEYPRESS_SCENE_TRIPLE
    case COCO_STD_KEYPRESS_SCENE_QUAD
    case COCO_STD_KEYPRESS_SCENE_QUINT
    case COCO_STD_KEYPRESS_SCENE_HOLD
    case COCO_STD_KEYPRESS_SCENE_RELEASE
    case COCO_STD_KEYPRESS_SCENE_MAX
    case COCO_STD_KEYPRESS_SCENE_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: CocoClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
public protocol SnapshotDelegate {
  func SnapshotStatusCB(filePath: Swift.String?, status: CocoClientSDK.CapabilitySnapshot.SnapShotStatus, coconetContext: Swift.UnsafeMutableRawPointer?, snapshotContext: Swift.UnsafeMutableRawPointer?)
}
public class InfoRequest {
  public var networkId: Swift.String? {
    get
  }
  public var reqNodeId: Swift.UInt32? {
    get
  }
  public var requestId: Swift.UInt32? {
    get
  }
  public var respNodeId: Swift.UInt32? {
    get
  }
  public var mandatoryInfoRequest: [CocoClientSDK.Parameter] {
    get
  }
  public var optionalParameters: [CocoClientSDK.Parameter] {
    get
  }
  public var messageText: Swift.String? {
    get
  }
  public var timeoutMs: Swift.UInt32
  public init(networkId: Swift.String?, requestId: Swift.UInt32?, reqNodeId: Swift.UInt32?, respNodeId: Swift.UInt32?, mandatoryInfoRequestArr: [CocoClientSDK.Parameter], optionalParameters: [CocoClientSDK.Parameter], messageText: Swift.String, cmdSeqNum: Swift.UInt32)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FirmwareUpdate {
  public var networkId: Swift.String? {
    get
  }
  public var deviceNodeId: Swift.UInt32 {
    get
  }
  public var packetId: Swift.UInt32 {
    get
  }
  public var status: CocoClientSDK.StatusCode {
    get
  }
  public var oldVersion: Swift.String? {
    get
  }
  public var newVersion: Swift.String? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers public class CapabilityStorageControl : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_STORAGE_CONTROL_MIN
    case COCO_STD_ATTR_STORAGE_CONTENT_COUNT
    case COCO_STD_ATTR_STORAGE_CAPACITY_MB
    case COCO_STD_ATTR_STORAGE_AVAILABLE_MB
    case COCO_STD_ATTR_STORAGE_SUPPORTED_TYPES_ARR
    case COCO_STD_ATTR_STORAGE_RECORDING_TIME_CONFIG
    case COCO_STD_ATTR_STORAGE_RECORDING_SIZE_CONFIG
    case COCO_STD_ATTR_STORAGE_LAST_UPDATED_CONTENT_METADATA
    case COCO_STD_ATTR_STORAGE_COOL_OFF_PERIOD
    case COCO_STD_ATTR_STORAGE_RECORDING_IN_PROGRESS
    case COCO_STD_ATTR_STORAGE_RECORDING_STARTED
    case COCO_STD_ATTR_STORAGE_CONTROL_MAX
    case COCO_STD_ATTR_STORAGE_CONTROL_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_STORAGE_CONTROL_MIN
    case COCO_STD_CMD_STORAGE_UPLOAD
    case COCO_STD_CMD_STORAGE_DOWNLOAD
    case COCO_STD_CMD_STORAGE_CONTROL_MAX
    case COCO_STD_CMD_STORAGE_CONTROL_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public func storageUpload(contentType: Swift.Int32, uploadTriggerType: Swift.Int32, uploadTriggeredUri: CocoClientSDK.UploadTriggerURI, channelPortArr: [Swift.UInt16], appendFlag: Swift.Int32, offset: Swift.UInt32, size: Swift.UInt32, channelDescriptionArr: [Swift.String], createdTimestamp: Darwin.time_t, commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func storageDownload(contentId: Swift.UInt64, channelPort: Swift.UInt16, offset: Swift.UInt32, size: Swift.UInt32, commandContext: Swift.UnsafeMutableRawPointer?) throws
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  override public init(capabilityId: Swift.Int32, parent: CocoClientSDK.Resource)
}
@_inheritsConvenienceInitializers public class CapabilityMediaStreaming : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_MEDIA_MIN
    case COCO_STD_ATTR_MEDIA_DESCRIPTOR
    case COCO_STD_ATTR_MEDIA_STREAM_ID_ARR
    case COCO_STD_ATTR_MEDIA_STREAM_ACTIVE_CLIENTS_ARR
    case COCO_STD_ATTR_MEDIA_STREAM_MAX_ACTIVE_CLIENTS_ARR
    case COCO_STD_ATTR_MEDIA_STREAM_REC_STATUS_ARR
    case COCO_STD_ATTR_MEDIA_STREAM_REC_SUPPORTED_ARR
    case COCO_STD_ATTR_MEDIA_STREAM_RECORDING_IN_PROGRESS
    case COCO_STD_ATTR_MEDIA_MAX
    case COCO_STD_ATTR_MEDIA_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum MediaTrasportType : Swift.Int32, Swift.Codable {
    case COCO_STD_MEDIA_TRANSPORT_MIN
    case COCO_STD_MEDIA_TRANSPORT_TCP
    case COCO_STD_MEDIA_TRANSPORT_UDP
    case COCO_STD_MEDIA_TRANSPORT_MAX
    case COCO_STD_MEDIA_TRANSPORT_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum DataStreamStatus : Swift.Int32, Swift.Codable {
    case COCO_CLIENT_MEDIA_STREAM_MIN
    case COCO_CLIENT_MEDIA_STREAM_OPENED
    case COCO_CLIENT_MEDIA_STREAM_FAILED
    case COCO_CLIENT_MEDIA_STREAM_CLOSED
    case COCO_CLIENT_MEDIA_STREAM_TIMEOUT
    case COCO_CLIENT_MEDIA_MAX_CLIENT_REACHED
    case COCO_CLIENT_MEDIA_STREAM_MAX
    case COCO_CLIENT_MEDIA_STREAM_INVALID
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum StreamStatus : Swift.Int32, Swift.Codable {
    case COCO_STD_MEDIA_STREAM_STATUS_MIN
    case COCO_STD_MEDIA_STREAM_STARTED
    case COCO_STD_MEDIA_STREAM_START_FAILED
    case COCO_STD_MEDIA_STREAM_STOPPED
    case COCO_STD_MEDIA_STREAM_STOP_FAILED
    case COCO_STD_MEDIA_STREAM_STATUS_MAX
    case COCO_STD_MEDIA_STREAM_STATUS_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum RecordStatus : Swift.Int32, Swift.Codable {
    case COCO_STD_MEDIA_REC_MIN
    case COCO_STD_MEDIA_REC_STARTED
    case COCO_STD_MEDIA_REC_START_FAILED
    case COCO_STD_MEDIA_REC_STOPPED
    case COCO_STD_MEDIA_REC_STOP_FAILED
    case COCO_STD_MEDIA_REC_STATUS_MAX
    case COCO_STD_MEDIA_REC_STATUS_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum RecordMode : Swift.Int32, Swift.Codable {
    case COCO_STD_MEDIA_RECORD_MIN
    case COCO_STD_MEDIA_RECORD_MANUAL_STOP
    case COCO_STD_MEDIA_RECORD_TIME
    case COCO_STD_MEDIA_RECORD_SIZE
    case COCO_STD_MEDIA_RECORD_MAX
    case COCO_STD_MEDIA_RECORD_UNBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_MEDIA_STREAM_MIN
    case COCO_STD_CMD_MEDIA_STREAM_START
    case COCO_STD_CMD_MEDIA_STREAM_STOP
    case COCO_STD_CMD_MEDIA_RECORD_START
    case COCO_STD_CMD_MEDIA_RECORD_STOP
    case COCO_STD_CMD_MEDIA_RECORD_CONFIG
    case COCO_STD_CMD_MEDIA_STREAM_MAX
    case COCO_STD_CMD_MEDIA_STREAM_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public func startMediaRecording(streamIdArray: [Swift.UInt32], streamDescriptionArr: [Swift.String], commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func stopMediaRecording(streamIdArray: [Swift.UInt32], commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func configMediaRecording(recordMode: CocoClientSDK.CapabilityMediaStreaming.RecordMode, size: Swift.UInt32, timeMs: Swift.UInt32, recordCoolOffTimeMs: Swift.UInt32, commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func coco_client_media_stream_open(command: CocoClientSDK.MediaStreamingStart, delegate: CocoClientSDK.MediaStreamDelegate, timeoutMs: Swift.UInt32, streamContext: Swift.UnsafeMutableRawPointer?) -> Swift.Bool
  public func coco_client_media_stream_close(streamHandle: Swift.UnsafeMutablePointer<CCocoClientSDK.coco_client_media_stream_handle_t>?) -> Swift.Bool
  public func coco_client_channel_data_send(channelHandle: Swift.UnsafeMutablePointer<CCocoClientSDK.coco_client_channel_handle_t>, data: Swift.UnsafeMutablePointer<Swift.Int8>, len: Darwin.size_t) -> Darwin.ssize_t
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  override public init(capabilityId: Swift.Int32, parent: CocoClientSDK.Resource)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityLevel : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_LEVEL_MIN
    case COCO_STD_ATTR_LEVEL_PCT
    case COCO_STD_ATTR_LEVEL_MAX
    case COCO_STD_ATTR_LEVEL_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_LEVEL_MIN
    case COCO_STD_CMD_SET_LEVEL
    case COCO_STD_CMD_SET_LEVEL_WITH_ON_OFF
    case COCO_STD_CMD_FETCH_LEVEL
    case COCO_STD_CMD_LEVEL_MAX
    case COCO_STD_CMD_LEVEL_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: CocoClientSDK.CommandIDProtocol?) -> Swift.Bool
  public func setLevelWithOnOFF(level: Swift.UInt8, transition: Swift.Bool, restoreLevel: Swift.Bool, commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func setLevel(level: Swift.UInt8, transition: Swift.Bool, commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func fetchLevel(commandContext _: Swift.UnsafeMutableRawPointer?) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityNotification : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_NOTIFICATION_MIN
    case COCO_STD_ATTR_NOTIFICATION_MAX
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_NOTIFICATION_MIN
    case COCO_STD_CMD_NOTIFICATION_MAX
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: CocoClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
public enum ERROR_NO : Swift.Int32 {
  case COCO_CLIENT_ERROR_MIN
  case COCO_CLIENT_API_SUCCESS
  case COCO_CLIENT_API_FAILURE
  case COCO_CLIENT_API_EINVAL
  case COCO_CLIENT_API_EPERM
  case COCO_CLIENT_API_ETIME
  case COCO_CLIENT_ERROR_MAX
  case COCO_CLIENT_ERROR_UBOUND
  public typealias RawValue = Swift.Int32
  public init?(rawValue: Swift.Int32)
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum COCO_ERROR : Swift.Error {
  case COCOInitError
  case COCOConnectError
  case COCOGetNetworkError
  case COCODisconnectNetworkError
  case COCOGetSavedNetwork
  case COCODiscoverResourcesError
  case COCODeviceMgmtError
  case COCOResourceCommandError
  case COCOSetTokenError
  case COCOGetAccessToken
  case COCOInfoResponseError
  case COCOInfoRequestError
  case COCOSavedNetworkError
  case runtimeError(Swift.String)
}
public enum StatusCode : Swift.Int32, Swift.Codable {
  case COCO_STD_STATUS_CODE_MIN
  case COCO_STD_STATUS_SUCCESS
  case COCO_STD_STATUS_INVALID
  case COCO_STD_STATUS_FAILURE
  case COCO_STD_STATUS_PARTIAL_SUCCESS
  case COCO_STD_STATUS_TIMEOUT
  case COCO_STD_STATUS_REJECTED
  case COCO_STD_STATUS_DEVICE_BUSY
  case COCO_STD_STATUS_IN_PROGRESS
  case COCO_STD_STATUS_AUTH_FAILED
  case COCO_STD_STATUS_RESOURCE_NOT_SUPPORTED
  case COCO_STD_STATUS_SUCCESS_INSECURE
  case COCO_STD_STATUS_PARTIAL_SUCCESS_INSECURE
  case COCO_STD_STATUS_CONNECTIVITY_ERROR
  case COCO_STD_STATUS_CMD_NOT_SUPPORTED
  case COCO_STD_STATUS_TOKEN_NOT_SET
  case COCO_STD_STATUS_TOKEN_REFRESH_FAILED
  case COCO_STD_STATUS_DISCOVERY_NOT_APPLICABLE
  case COCO_STD_STATUS_NETWORK_DISCONNECTED
  case COCO_STD_STATUS_CODE_MAX
  case COCO_STD_STATUS_CODE_UBOUND
  public typealias RawValue = Swift.Int32
  public init?(rawValue: Swift.Int32)
  public var rawValue: Swift.Int32 {
    get
  }
}
open class Command : Swift.Codable {
  public var cmdID: Swift.Int32
  public var timeoutMs: Swift.UInt32
  public init(cmdID: Swift.Int32)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  open func encode(to encoder: Swift.Encoder) throws
}
public class CommandStateCB {
  public var networkId: Swift.String {
    get
  }
  public var deviceNodeId: Swift.UInt32 {
    get
  }
  public var resourceEui: Swift.String {
    get
  }
  public var capabilityId: CocoClientSDK.Capability.CapabilityId {
    get
  }
  public var commandId: Swift.UInt8? {
    get
  }
  public var state: CocoClientSDK.StatusCode? {
    get
  }
  public init(networkId: Swift.String, deviceNodeId: Swift.UInt32, resoureceEui: Swift.String, capabilityId: CocoClientSDK.Capability.CapabilityId, commandId: Swift.UInt8?)
  open func setState(state: CocoClientSDK.StatusCode?)
  @objc deinit
}
public protocol CommandIDProtocol : Swift.Decodable, Swift.Encodable {
  func getInt() -> Swift.Int32
}
public protocol AttributeIDProtocol : Swift.Decodable, Swift.Encodable {
  func getInt() -> Swift.Int32
}
open class Capability : Swift.Codable {
  public enum CapabilityId : Swift.Int32, Swift.Hashable, Swift.CaseIterable, Swift.Codable {
    case COCO_STD_CAP_MIN
    case COCO_STD_CAP_ON_OFF_CONTROL
    case COCO_STD_CAP_LEVEL_CTRL
    case COCO_STD_CAP_COLOR_CTRL
    case COCO_STD_CAP_LOCK_CONTROL
    case COCO_STD_CAP_ENERGY_METERING
    case COCO_STD_CAP_MOTION_SENSING
    case COCO_STD_CAP_OCCUPANCY_SENSING
    case COCO_STD_CAP_CONTACT_SENSING
    case COCO_STD_CAP_FLUID_LEVEL_MEASUREMENT
    case COCO_STD_CAP_FIRE_SENSING
    case COCO_STD_CAP_TEMPERATURE_MEASUREMENT
    case COCO_STD_CAP_ILLUMINANCE_MEASUREMENT
    case COCO_STD_CAP_POWER_LEVEL_MEASUREMENT
    case COCO_STD_CAP_TUNNEL_CONTROL
    case COCO_STD_CAP_REL_HUMIDITY_MEASUREMENT
    case COCO_STD_CAP_KEYPRESS_SENSING
    case COCO_STD_CAP_WARNING_DEV_CONTROL
    case COCO_STD_CAP_NETWORK_CONFIGURATION
    case COCO_STD_CAP_MEDIA_STREAM
    case COCO_STD_CAP_STORAGE_CONFIG
    case COCO_STD_CAP_STORAGE_CONTROL
    case COCO_STD_CAP_MOTOR_CTRL
    case COCO_STD_CAP_IMAGE_CTRL
    case COCO_STD_CAP_SNAPSHOT
    case COCO_STD_CAP_STATIONARY_POSITION
    case COCO_STD_CAP_REAL_TIME_POSITION
    case COCO_STD_CAP_MAX
    case COCO_STD_CAP_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
    public typealias AllCases = [CocoClientSDK.Capability.CapabilityId]
    public static var allCases: [CocoClientSDK.Capability.CapabilityId] {
      get
    }
  }
  public var parentResource: CocoClientSDK.Resource? {
    get
  }
  public var capabilityId: CocoClientSDK.Capability.CapabilityId {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var standardCommandArray: [Swift.Int32] {
    get
  }
  public var attributeMap: [Swift.Int32 : CocoClientSDK.Attribute] {
    get
  }
  public var realCapability: CocoClientSDK.Capability? {
    get
  }
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  public init(capabilityId: Swift.Int32, parent: CocoClientSDK.Resource)
  open func setName(name: Swift.String?)
  open func addToAttributeMap(attribute: CocoClientSDK.Attribute)
  open func removeFromAttributeMap(attributeId: Swift.Int32)
  open func containsAtrribute(attributeId: Swift.Int32) -> Swift.Bool
  open func clearAttributeMap()
  open func addTostandardCommandArray(commandId: Swift.Int32)
  open func removeFromstandardCommandArray(commandId: Swift.Int32)
  open func clearstandardCommandArray()
  open func setParent(resource: CocoClientSDK.Resource)
  public func sendResourceCommand(command: CocoClientSDK.Command, commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func supports(commandId: CocoClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityMeter : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_METER_MIN
    case COCO_STD_ATTR_METER_CONSUMPTION_KWH
    case COCO_STD_ATTR_METER_DEMAND_WATT
    case COCO_STD_ATTR_METER_LAST_READ_TIME_ARR
    case COCO_STD_ATTR_METER_MULTIPLIER
    case COCO_STD_ATTR_METER_DIVISOR
    case COCO_STD_ATTR_METER_CONS_PROD_FMT_DIGITS
    case COCO_STD_ATTR_METER_CONS_PROD_FMT_DECIMALS
    case COCO_STD_ATTR_METER_DEMAND_FMT_DIGITS
    case COCO_STD_ATTR_METER_DEMAND_DECIMALS
    case COCO_STD_ATTR_METER_PRODUCTION_KWH
    case COCO_STD_ATTR_METER_UNIT_OF_MEASURE
    case COCO_STD_ATTR_METER_MAX
    case COCO_STD_ATTR_METER_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_METER_MIN
    case COCO_STD_CMD_RESET
    case COCO_STD_CMD_GET_CONSUMPTION
    case COCO_STD_CMD_GET_DEMAND
    case COCO_STD_CMD_METER_MAX
    case COCO_STD_CMD_METER_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum ConsumptionScale : Swift.Int32, Swift.Codable {
    case COCO_STD_CONS_SCALE_MIN
    case COCO_STD_CONS_SCALE_KW
    case COCO_STD_CONS_SCALE_CUBIC_METER_PER_HR
    case COCO_STD_CONS_SCALE_CUBIC_FEET_PER_HR
    case COCO_STD_CONS_SCALE_CENTI_CUBIC_FEET_PER_HR
    case COCO_STD_CONS_SCALE_US_GALLON_PER_HR
    case COCO_STD_CONS_SCALE_IMP_GALLON_PER_HR
    case COCO_STD_CONS_SCALE_BTU_PER_HR
    case COCO_STD_CONS_SCALE_LITERS_PER_HR
    case COCO_STD_CONS_SCALE_KPA_GAUGE
    case COCO_STD_CONS_SCALE_KPA_ABSOLUTE
    case COCO_STD_CONS_SCALE_KILO_CUBIC_FEET_PER_HR
    case COCO_STD_CONS_SCALE_UNITLESS
    case COCO_STD_CONS_SCALE_MJ_PER_SEC
    case COCO_STD_CONS_SCALE_MAX
    case COCO_STD_CONS_SCALE_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum DemandScale : Swift.Int32, Swift.Codable {
    case COCO_STD_DEMAND_SCALE_MIN
    case COCO_STD_DEMAND_SCALE_KWH
    case COCO_STD_DEMAND_SCALE_CUBIC_METER
    case COCO_STD_DEMAND_SCALE_CUBIC_FEET
    case COCO_STD_DEMAND_SCALE_CENTI_CUBIC_FEET
    case COCO_STD_DEMAND_SCALE_US_GALLON
    case COCO_STD_DEMAND_SCALE_IMP_GALLON
    case COCO_STD_DEMAND_SCALE_BTU
    case COCO_STD_DEMAND_SCALE_LITERS
    case COCO_STD_DEMAND_SCALE_KPA_GAUGE
    case COCO_STD_DEMAND_SCALE_KPA_ABSOLUTE
    case COCO_STD_DEMAND_SCALE_KILO_CUBIC_FEET
    case COCO_STD_DEMAND_SCALE_UNITLESS
    case COCO_STD_DEMAND_SCALE_MJ
    case COCO_STD_DEMAND_SCALE_MAX
    case COCO_STD_DEMAND_SCALE_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: CocoClientSDK.CommandIDProtocol?) -> Swift.Bool
  public func getConsumption(commandContext: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func getDemand(commandContext: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Native {
  public enum STD_CMD_CAP_ID : Swift.Int32 {
    case COCO_STD_CAP_MIN
    case COCO_STD_CAP_CUSTOM
    case COCO_STD_CAP_CONFIGURATION
    case COCO_STD_CAP_BASIC
    case COCO_STD_CAP_ON_OFF
    case COCO_STD_CAP_LEVEL_CTRL
    case COCO_STD_CAP_COLOR_CTRL
    case COCO_STD_CAP_DOOR_LOCK
    case COCO_STD_CAP_IDENTITY
    case COCO_STD_CAP_METERING
    case COCO_STD_CAP_NOTIFICATION
    case COCO_STD_CAP_MOTION_SENSING
    case COCO_STD_CAP_OCCUPANCY_SENSING
    case COCO_STD_CAP_DOOR_WINDOW_SENSING
    case COCO_STD_CAP_WATER_LEVEL_SENSING
    case COCO_STD_CAP_CARBON_MONOXIDE_SENSING
    case COCO_STD_CAP_FIRE_DETECTION
    case COCO_STD_CAP_TEMPERATURE_MEASUREMENT
    case COCO_STD_CAP_ILLUMINANCE_MEASUREMENT
    case COCO_STD_CAP_POWER_CONFIGURATION
    case COCO_STD_CAP_TUNNEL
    case COCO_STD_CAP_IMAGE_CTRL
    case COCO_STD_CAP_SNAPSHOT
    case COCO_STD_CAP_HEAT_SENSING
    case COCO_STD_CAP_MAX
    case COCO_STD_CAP_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public static func coco_client_get_available_channel_port(device: CocoClientSDK.Device, portCount: Swift.UInt16) -> [Swift.UInt16]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CommandWarning : CocoClientSDK.Command {
  public var commandID: CocoClientSDK.CapabilityWarning.CommandId? {
    get
  }
  public init(commandID: CocoClientSDK.CapabilityWarning.CommandId)
  @objc deinit
  override public init(cmdID: Swift.Int32)
}
@_hasMissingDesignatedInitializers public class WarningStart : CocoClientSDK.CommandWarning {
  public var warning: CocoClientSDK.CapabilityWarning.WarningType? {
    get
  }
  public init(warningType: CocoClientSDK.CapabilityWarning.WarningType)
  @objc deinit
  override public init(commandID: CocoClientSDK.CapabilityWarning.CommandId)
}
@_hasMissingDesignatedInitializers public class WarningStop : CocoClientSDK.CommandWarning {
  public var warning: CocoClientSDK.CapabilityWarning.WarningType? {
    get
  }
  public init()
  @objc deinit
  override public init(commandID: CocoClientSDK.CapabilityWarning.CommandId)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InfoResponseValue : CocoClientSDK.Value {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CommandDevice {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CommandConfigWIFI : CocoClientSDK.CommandDevice {
  public init(ssid: Swift.String, password: Swift.String)
  @objc deinit
}
public class CommandMediaStreaming : CocoClientSDK.Command {
  public init(commandId: CocoClientSDK.CapabilityMediaStreaming.CommandId)
  @objc deinit
  override public init(cmdID: Swift.Int32)
}
public class MediaStreamingStart : CocoClientSDK.CommandMediaStreaming {
  public init(streamId: Swift.UInt32, streamSessionId: Swift.Int32, streamDescription: Swift.String, channelPortArr: [Swift.UInt16], streamTransportTypeArr: [CocoClientSDK.CapabilityMediaStreaming.MediaTrasportType])
  @objc deinit
  override public init(commandId: CocoClientSDK.CapabilityMediaStreaming.CommandId)
}
public class MediaStreamingStop : CocoClientSDK.CommandMediaStreaming {
  public init(streamId: Swift.UInt32, streamSessionId: Swift.Int32)
  @objc deinit
  override public init(commandId: CocoClientSDK.CapabilityMediaStreaming.CommandId)
}
public class MediaRecordStart : CocoClientSDK.CommandMediaStreaming {
  public init(streamIdArray: [Swift.UInt32], streamDescriptionArr: [Swift.String])
  @objc deinit
  override public init(commandId: CocoClientSDK.CapabilityMediaStreaming.CommandId)
}
public class MediaRecordStop : CocoClientSDK.CommandMediaStreaming {
  public init(streamIdArray: [Swift.UInt32])
  @objc deinit
  override public init(commandId: CocoClientSDK.CapabilityMediaStreaming.CommandId)
}
@_hasMissingDesignatedInitializers public class MediaRecordConfig : CocoClientSDK.CommandMediaStreaming {
  @objc deinit
  override public init(commandId: CocoClientSDK.CapabilityMediaStreaming.CommandId)
}
open class Device : Swift.Codable {
  public enum PowerSource : Swift.Int32, Swift.Codable {
    case COCO_STD_POWER_SRC_MIN
    case COCO_STD_POWER_SRC_UNKNOWN
    case COCO_STD_POWER_SRC_MAINS_SINGLE_PHASE
    case COCO_STD_POWER_SRC_MAINS_3_PHASE
    case COCO_STD_POWER_SRC_MAINS_UNKNOWN_PHASE
    case COCO_STD_POWER_SRC_BATTERY
    case COCO_STD_POWER_SRC_DC_SOURCE
    case COCO_STD_POWER_SRC_EMERGENCY_CONST_POWER
    case COCO_STD_POWER_SRC_EMERGENCY_TRANSFER_SWITCH
    case COCO_STD_POWER_SRC_NOT_AVAILABLE
    case COCO_STD_POWER_SRC_MAX
    case COCO_STD_POWER_SRC_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum ReceiverType : Swift.Int32, Swift.Codable {
    case COCO_STD_RCVR_TYPE_MIN
    case COCO_STD_RCVR_TYPE_RX_ON_WHEN_IDLE
    case COCO_STD_RCVR_TYPE_PERIODIC
    case COCO_STD_RCVR_TYPE_WHEN_STIMULATED
    case COCO_STD_RCVR_TYPE_NOT_AVAILABLE
    case COCO_STD_RCVR_TYPE_MAX
    case COCO_STD_RCVR_TYPE_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var parentNetwork: CocoClientSDK.Network? {
    get
  }
  public var deviceNodeId: Swift.UInt32 {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var devicePSN: Swift.String? {
    get
  }
  public var productName: Swift.String? {
    get
  }
  public var make: Swift.String? {
    get
  }
  public var model: Swift.String? {
    get
  }
  public var firmwareVersion: Swift.String? {
    get
  }
  public var powerSource: CocoClientSDK.Device.PowerSource? {
    get
  }
  public var receiverType: CocoClientSDK.Device.ReceiverType? {
    get
  }
  public var isExtendable: Swift.Bool {
    get
  }
  public var protocolIdArr: [CocoClientSDK.`Protocol`] {
    get
  }
  public var resourceMap: [Swift.String : CocoClientSDK.Resource] {
    get
  }
  public var isOnline: Swift.Bool {
    get
  }
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  public init(deviceNodeId: Swift.UInt32, parent: CocoClientSDK.Network?)
  open func setParent(network: CocoClientSDK.Network)
  open func setName(name: Swift.String)
  open func setDeviceType(type: Swift.Bool)
  open func setPSN(serial: Swift.String)
  open func setProductName(name: Swift.String)
  open func setMake(name: Swift.String)
  open func setModel(name: Swift.String)
  open func setFirmwareversion(version: Swift.String)
  open func setPowerSource(source: CocoClientSDK.Device.PowerSource)
  open func setReceiverType(type: CocoClientSDK.Device.ReceiverType)
  open func setExtendable(extendable: Swift.Bool)
  open func setOnline(online: Swift.Bool)
  open func addToResourceMap(resource: CocoClientSDK.Resource)
  open func removeFromResourceMap(ResourceEui: Swift.String)
  open func addProtocol(protocolSupported: CocoClientSDK.`Protocol`)
  public func add_resource(resource: CocoClientSDK.CommandAddResource, timeoutMs: Swift.UInt32 = 0, requestContext: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func reboot_device(timeoutMs: Swift.UInt32 = 0, requestContext: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func remove_resource(resource: CocoClientSDK.CommandRemoveResource, timeoutMs: Swift.UInt32 = 0, requestContext: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func force_remove_resource(resource: CocoClientSDK.CommandForceRemoveResource, timeoutMs: Swift.UInt32 = 0, requestContext: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func discover_resource(command: CocoClientSDK.CommandDiscover, timeoutMs: Swift.UInt32 = 0, requestContext _: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func config_wifi(command: CocoClientSDK.CommandConfigWIFI, timeoutMs: Swift.UInt32 = 0, requestContext _: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  @objc deinit
}
extension Device : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  open var hashValue: Swift.Int {
    get
  }
}
extension Device : Swift.Equatable {
  public static func == (lhs: CocoClientSDK.Device, rhs: CocoClientSDK.Device) -> Swift.Bool
}
public class DeviceCommandStatus {
  public var networkId: Swift.String {
    get
  }
  public var deviceNodeId: Swift.UInt32 {
    get
  }
  public var senderNodeId: Swift.UInt32 {
    get
  }
  public var cmdSeqNum: Swift.UInt32 {
    get
  }
  public var status: CocoClientSDK.StatusCode {
    get
  }
  public var impactedResourceArr: [CocoClientSDK.Resource] {
    get
  }
  public init(networkId: Swift.String, deviceNodeId: Swift.UInt32, senderNodeId: Swift.UInt32, cmdSeqNum: Swift.UInt32, status: CocoClientSDK.StatusCode)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CommandFluidLevelSensing : CocoClientSDK.Command {
  public var commandID: CocoClientSDK.CapabilityFluidLevelSensing.CommandId? {
    get
  }
  public init(commandID: CocoClientSDK.CapabilityFluidLevelSensing.CommandId)
  @objc deinit
  override public init(cmdID: Swift.Int32)
}
open class Resource : Swift.Codable {
  public enum PowerSource : Swift.Int32, Swift.Codable {
    case POWER_SRC_MIN
    case POWER_SRC_UNKNOWN
    case POWER_SRC_MAINS_SINGLE_PHASE
    case POWER_SRC_MAINS_3_PHASE
    case POWER_SRC_MAINS_UNKNOWN_PHASE
    case POWER_SRC_BATTERY
    case POWER_SRC_DC_SOURCE
    case POWER_SRC_EMERGENCY_CONST_POWER
    case POWER_SRC_EMERGENCY_TRANSFER_SWITCH
    case POWER_SRC_MAX
    case POWER_SRC_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum ReceiverType : Swift.Int32, Swift.Codable {
    case RCVR_TYPE_MIN
    case RCVR_TYPE_RX_ON_WHEN_IDLE
    case RCVR_TYPE_PERIODIC
    case RCVR_TYPE_WHEN_STIMULATED
    case RCVR_TYPE_MAX
    case RCVR_TYPE_UNBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var eui: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var manufacturer: Swift.String? {
    get
  }
  public var model: Swift.String? {
    get
  }
  public var metadata: Swift.String? {
    get
  }
  public var firmware: Swift.String? {
    get
  }
  public var powerSource: CocoClientSDK.Resource.PowerSource? {
    get
  }
  public var receiverType: CocoClientSDK.Resource.ReceiverType? {
    get
  }
  public var parentDevice: CocoClientSDK.Device? {
    get
  }
  public var parentDeviceId: Swift.UInt32 {
    get
  }
  public var parentZone: CocoClientSDK.Zone? {
    get
  }
  public var explorationStatus: CocoClientSDK.StatusCode? {
    get
  }
  public var capabilityMap: [CocoClientSDK.Capability.CapabilityId : CocoClientSDK.Capability] {
    get
  }
  public var isOnline: Swift.Bool? {
    get
  }
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  public init(eui: Swift.String, parentDevice: CocoClientSDK.Device)
  public init(eui: Swift.String, parentZone: CocoClientSDK.Zone, parentDevice: CocoClientSDK.Device)
  open func setName(name: Swift.String)
  open func setManufacturer(manufacturer: Swift.String?)
  open func setModel(model: Swift.String?)
  open func setMetadata(metadata: Swift.String?)
  open func setFirmware(firmwareVersion: Swift.String?)
  open func setPowerSource(powerSource: CocoClientSDK.Resource.PowerSource)
  open func setReceiverType(receiverType: CocoClientSDK.Resource.ReceiverType)
  open func setExplorationStatus(explorationStatus: CocoClientSDK.StatusCode)
  open func setOnline(online: Swift.Bool)
  open func setZone(zone: CocoClientSDK.Zone)
  open func setDevice(device: CocoClientSDK.Device)
  open func addToCapabilityMap(capability: CocoClientSDK.Capability)
  open func removeFromCapalibityMap(capabilityID: CocoClientSDK.Capability.CapabilityId)
  public func getCapabilityMap(index: CocoClientSDK.Capability.CapabilityId) -> CocoClientSDK.Capability?
  public func update(name: Swift.String, timeoutMs: Swift.UInt32 = 0, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func update(metadata: Swift.String, timeoutMs: Swift.UInt32 = 0, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  @objc deinit
}
extension Resource : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  open var hashValue: Swift.Int {
    get
  }
}
extension Resource : Swift.Equatable {
  public static func == (lhs: CocoClientSDK.Resource, rhs: CocoClientSDK.Resource) -> Swift.Bool
}
public class AdvertiseResource : Swift.Hashable, Swift.Equatable {
  public var networkId: Swift.String {
    get
  }
  public var deviceNodeId: Swift.UInt32 {
    get
  }
  public var resourceEui: Swift.String? {
    get
  }
  public var resourceName: Swift.String {
    get
  }
  public var resourceMetadata: Swift.String? {
    get
  }
  public var protocolId: CocoClientSDK.`Protocol` {
    get
  }
  public static func == (lhs: CocoClientSDK.AdvertiseResource, rhs: CocoClientSDK.AdvertiseResource) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public init(networkId: Swift.String, deviceNodeId: Swift.UInt32, resourceEui: Swift.String?, resourceName: Swift.String, resourceMetadata: Swift.String?, protocolId: CocoClientSDK.`Protocol`)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers public class CapabilityStorageCofig : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_STORAGE_CONFIG_MIN
    case COCO_STD_ATTR_STORAGE_STORAGE_NODE
    case COCO_STD_ATTR_STORAGE_CONFIG_MAX
    case COCO_STD_ATTR_STORAGE_CONFIG_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_STORAGE_CONFIG_MIN
    case COCO_STD_CMD_STORAGE_CONFIG
    case COCO_STD_CMD_STORAGE_CONFIG_MAX
    case COCO_STD_CMD_STORAGE_CONFIG_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public func configStorage(storageNodeId: Swift.UInt32, resourceEui: Swift.String, commandContext: Swift.UnsafeMutableRawPointer?) throws
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  override public init(capabilityId: Swift.Int32, parent: CocoClientSDK.Resource)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityColor : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_COLOR_MIN
    case COCO_STD_ATTR_COLOR_RED
    case COCO_STD_ATTR_COLOR_GREEN
    case COCO_STD_ATTR_COLOR_BLUE
    case COCO_STD_ATTR_COLOR_HUE_DEGREES
    case COCO_STD_ATTR_COLOR_SATURATION_PCT
    case COCO_STD_ATTR_COLOR_LUMINANCE_PCT
    case COCO_STD_ATTR_COLOR_TEMP_KELVIN
    case COCO_STD_ATTR_COLOR_COMP_ID_ARR
    case COCO_STD_ATTR_COLOR_COMP_VALUES_ARR
    case COCO_STD_ATTR_COLOR_X
    case COCO_STD_ATTR_COLOR_Y
    case COCO_STD_ATTR_COLOR_MODE
    case COCO_STD_ATTR_COLOR_HSL
    case COCO_STD_ATTR_COLOR_MAX
    case COCO_STD_ATTR_COLOR_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_COLOR_MIN
    case COCO_STD_CMD_SET_COLOR_RGB
    case COCO_STD_CMD_SET_COLOR_HSL
    case COCO_STD_CMD_SET_COLOR_TEMP
    case COCO_STD_CMD_SET_COLOR_COMPONENTS
    case COCO_STD_CMD_GET_COLOR_RGB
    case COCO_STD_CMD_GET_COLOR_HSL
    case COCO_STD_CMD_GET_COLOR_TEMP
    case COCO_STD_CMD_GET_COLOR_COMPONENTS
    case COCO_STD_CMD_COLOR_MAX
    case COCO_STD_CMD_COLOR_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: CocoClientSDK.CommandIDProtocol?) -> Swift.Bool
  public func setRGB(red: Swift.UInt8, green: Swift.UInt8, blue: Swift.UInt8, transition: Swift.Bool, transitionTime: Swift.UInt32, commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func setHSL(hue: Swift.UInt16, saturation: Swift.UInt8, luminance: Swift.UInt8, transition: Swift.Bool, transitionTime: Swift.UInt32, commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func setColourTemperature(temperature: Swift.Int, transition: Swift.Bool, transitionTime: Swift.UInt32, commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func setColourComponent(colorComponentIds: [Swift.Int], colorComponentValues: [Swift.Int], transition: Swift.Bool, transitionTime: Swift.UInt32, commandContext: Swift.UnsafeMutableRawPointer?) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CommandOnOff : CocoClientSDK.Command {
  public var commandID: CocoClientSDK.CapabilityOnOff.CommandId? {
    get
  }
  public init(commandID: CocoClientSDK.CapabilityOnOff.CommandId)
  @objc deinit
  override public init(cmdID: Swift.Int32)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityMotionSensing : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_MOTION_MIN
    case COCO_STD_ATTR_MOTION_DETECTED_FLAG
    case COCO_STD_ATTR_MOTION_SENSING_ENABLED
    case COCO_STD_ATTR_MOTION_IMAGE_WIDTH
    case COCO_STD_ATTR_MOTION_IMAGE_HEIGHT
    case COCO_STD_ATTR_MOTION_ROI_WIDTH
    case COCO_STD_ATTR_MOTION_ROI_HEIGHT
    case COCO_STD_ATTR_MOTION_ROI_INDICES_COUNT
    case COCO_STD_ATTR_MOTION_ROI_INDICES_ARR
    case COCO_STD_ATTR_MOTION_SENSITIVITY_PCT
    case COCO_STD_ATTR_MOTION_MAX
    case COCO_STD_ATTR_MOTION_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_MOTION_MIN
    case COCO_STD_CMD_MOTION_SENSING_ENABLE
    case COCO_STD_CMD_MOTION_SENSING_DISABLE
    case COCO_STD_CMD_MOTION_SENSING_SET_ROI
    case COCO_STD_CMD_MOTION_SENSING_REMOVE_ROI
    case COCO_STD_CMD_MOTION_SENSING_REMOVE_ALL_ROI
    case COCO_STD_CMD_MOTION_SENSING_SET_SENSITIVITY
    case COCO_STD_CMD_MOTION_MAX
    case COCO_STD_CMD_MOTION_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: CocoClientSDK.CommandIDProtocol?) -> Swift.Bool
  public func enableMotionSensing(commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func disbaleMotionSensing(commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func setSensitivity(sensitivity: Swift.UInt8, commandContext: Swift.UnsafeMutableRawPointer?) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityRealTimePosition : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_REAL_TIME_POSITION_MIN
    case COCO_STD_ATTR_REAL_TIME_POSITION_BEACON_LOC
    case COCO_STD_ATTR_REAL_TIME_POSITION_MAX
    case COCO_STD_ATTR_REAL_TIME_POSITION_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public init(capabilityId: Swift.Int32, parent: CocoClientSDK.Resource)
  @_hasMissingDesignatedInitializers public class BeaconLocation : Swift.Codable {
    public var locationId: Swift.String?
    public var lotId: Swift.String?
    public var xCoordinate: Swift.Double?
    public var yCoordinate: Swift.Double?
    public var beaconId: Swift.String?
    public var deviceResourceName: Swift.String?
    public var radius: Swift.String?
    public var errorPrecision: Swift.Double?
    public var rssi: Swift.Int?
    public var measuredPower: Swift.Int?
    @objc deinit
    required public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc deinit
}
public class ConnectivityTimers {
  public var fastRetryDuration: Swift.UInt32 {
    get
  }
  public var backgroundMaxRetryPeriod: Swift.UInt32 {
    get
  }
  public var foregroundMaxRetryPeriod: Swift.UInt32 {
    get
  }
  public var keepAliveInterval: Swift.UInt32 {
    get
  }
  public var keepAliveTimeout: Swift.UInt32 {
    get
  }
  public init(fastRetryDuration: Swift.UInt32, backgroundMaxRetryPeriod: Swift.UInt32, foregroundMaxRetryPeriod: Swift.UInt32, keepAliveInterval: Swift.UInt32, keepAliveTimeout: Swift.UInt32)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InfoRespInstallCode : CocoClientSDK.InfoResponseValue {
  public var installCode: Swift.String {
    get
  }
  public init(installCode: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InfoRespContentSearch : CocoClientSDK.InfoResponseValue {
  public var totalSearchCount: Swift.UInt64 {
    get
  }
  public var contentMetaDataArr: [CocoClientSDK.StorageContentMetadata] {
    get
  }
  public init(totalSearchCount: Swift.UInt64, contentMetaDataArr: [CocoClientSDK.StorageContentMetadata])
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityFluidLevelSensing : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_FLUID_LEVEL_MIN
    case COCO_STD_ATTR_WATER_OVERFLOW_FLAG
    case COCO_STD_ATTR_WATER_LEAK_FLAG
    case COCO_STD_ATTR_FLUID_LEVEL_MAX
    case COCO_STD_ATTR_FLUID_LEVEL_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_FLUID_SENSING_MIN
    case COCO_STD_CMD_FLUID_SENSING_ENABLE
    case COCO_STD_CMD_FLUID_SENSING_DISABLE
    case COCO_STD_CMD_FLUID_SENSING_MAX
    case COCO_STD_CMD_FLUID_LEVEL_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: CocoClientSDK.CommandIDProtocol?) -> Swift.Bool
  public func EnableFluidLevelSensing(commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func DisableFluidLevelSensing(commandContext: Swift.UnsafeMutableRawPointer?) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityFireSensing : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_FIRE_SENSING_MIN
    case COCO_STD_ATTR_CO_DETECTED_FLAG
    case COCO_STD_ATTR_COOKING_IND_FLAG
    case COCO_STD_ATTR_SMOKE_DETECTED_FLAG
    case COCO_STD_ATTR_HEAT_DETECTED_FLAG
    case COCO_STD_ATTR_OVERHEAT_DETECTED_FLAG
    case COCO_STD_ATTR_COLD_DETECTED_FLAG
    case COCO_STD_ATTR_FIRE_DETECTED_FLAG
    case COCO_STD_ATTR_FIRE_SENSING_MAX
    case COCO_STD_ATTR_FIRE_SENSING_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_FIRE_SENSING_MIN
    case COCO_STD_CMD_FIRE_SENSING_ENABLE
    case COCO_STD_CMD_FIRE_SENSING_DISABLE
    case COCO_STD_CMD_FIRE_SENSING_MAX
    case COCO_STD_CMD_FIRE_SENSING_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: CocoClientSDK.CommandIDProtocol?) -> Swift.Bool
  public func EnableFireSensing(commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func DisableFireSensing(commandContext: Swift.UnsafeMutableRawPointer?) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NetworkDatum {
  public var state: CocoClientSDK.States {
    get
  }
  public var dataReceived: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CustomTimer {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CommandLevel : CocoClientSDK.Command {
  public var level: Swift.UInt8? {
    get
  }
  public var transition: Swift.Bool? {
    get
  }
  public var transitionTime: Swift.UInt32? {
    get
  }
  public var commandID: CocoClientSDK.CapabilityLevel.CommandId? {
    get
  }
  public init(level: Swift.UInt8, transition: Swift.Bool)
  public static func get_command_level_obj(commandParam: Swift.UnsafeMutableRawPointer?, commandId _: Swift.Int32) -> CocoClientSDK.CommandLevel
  @objc deinit
  override public init(cmdID: Swift.Int32)
}
@_hasMissingDesignatedInitializers public class CommandLevelWithONOFF : CocoClientSDK.Command {
  public var level: Swift.UInt8? {
    get
  }
  public var transition: Swift.Bool? {
    get
  }
  public var transitionTime: Swift.UInt32? {
    get
  }
  public var commandID: CocoClientSDK.CapabilityLevel.CommandId? {
    get
  }
  public var restoreLevelFlag: Swift.Bool? {
    get
  }
  public init(level: Swift.UInt8, transition: Swift.Bool, restoreLevelFlag: Swift.Bool)
  public static func get_command_level_with_on_off_obj(commandParam: Swift.UnsafeMutableRawPointer?, commandId _: Swift.Int32) -> CocoClientSDK.CommandLevelWithONOFF
  @objc deinit
  override public init(cmdID: Swift.Int32)
}
public protocol PlatformDelegate {
  func getCwdPath() -> Swift.String
  func getClientId() -> Swift.String
  func getAppAccesslist() -> Swift.String
  func OAuthCallback(authorizationEndpoint: Swift.String, tokenEndpoint: Swift.String)
  func AccessTokenCallback(token: Swift.String?, status: CocoClientSDK.StatusCode, context: Swift.UnsafeMutableRawPointer?)
  func RefreshTokenCB(status: CocoClientSDK.StatusCode)
  func getDownloadPath() -> Swift.String
}
public class CommandSnapshot : CocoClientSDK.Command {
  public var commandID: CocoClientSDK.CapabilitySnapshot.CommandId {
    get
  }
  public init(commandID: CocoClientSDK.CapabilitySnapshot.CommandId)
  @objc deinit
  override public init(cmdID: Swift.Int32)
}
@_inheritsConvenienceInitializers public class CapabilityMotorCtrl : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_MOTOR_MIN
    case COCO_STD_ATTR_MOTOR_PAN_DOF
    case COCO_STD_ATTR_MOTOR_TILT_DOF
    case COCO_STD_ATTR_MOTOR_SPEED_RPM
    case COCO_STD_ATTR_MOTOR_PRESET_POINT_ARR
    case COCO_STD_ATTR_MOTOR_TRACK_PRESET_POINT_ARR
    case COCO_STD_ATTR_MOTOR_TRACK_ACTIVE_FLAG
    case COCO_STD_ATTR_MOTOR_TRACK_REPEAT_COUNT
    case COCO_STD_ATTR_MOTOR_TRACK_DELAY_MS
    case COCO_STD_ATTR_MOTOR_MAX
    case COCO_STD_ATTR_MOTOR_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_MOTOR_MIN
    case COCO_STD_CMD_MOTOR_PAN
    case COCO_STD_CMD_MOTOR_TILT
    case COCO_STD_CMD_MOTOR_SET_PRESET
    case COCO_STD_CMD_MOTOR_CLEAR_PRESET
    case COCO_STD_CMD_MOTOR_GO_TO_PRESET
    case COCO_STD_CMD_MOTOR_START_TRACK
    case COCO_STD_CMD_MOTOR_STOP_TRACK
    case COCO_STD_CMD_MOTOR_MAX
    case COCO_STD_CMD_MOTOR_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum PanDirection : Swift.Int32, Swift.Hashable, Swift.Codable {
    case COCO_STD_MOTOR_PAN_DIREC_MIN
    case COCO_STD_MOTOR_PAN_DIREC_LEFT
    case COCO_STD_MOTOR_PAN_DIREC_RIGHT
    case COCO_STD_MOTOR_PAN_DIREC_MAX
    case COCO_STD_MOTOR_PAN_DIREC_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum TiltDirection : Swift.Int32, Swift.Hashable, Swift.Codable {
    case COCO_STD_MOTOR_TILT_DIREC_MIN
    case COCO_STD_MOTOR_TILT_DIREC_UP
    case COCO_STD_MOTOR_TILT_DIREC_DOWN
    case COCO_STD_MOTOR_TILT_DIREC_MAX
    case COCO_STD_MOTOR_TILT_DIREC_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public func setMotorPan(direction: CocoClientSDK.CapabilityMotorCtrl.PanDirection, degree: Swift.UInt16, speed: Swift.Int32, commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func setMotorTilt(direction: CocoClientSDK.CapabilityMotorCtrl.TiltDirection, degree: Swift.UInt16, speed: Swift.Int32, commandContext: Swift.UnsafeMutableRawPointer?) throws
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  override public init(capabilityId: Swift.Int32, parent: CocoClientSDK.Resource)
}
public protocol MediaStreamDelegate {
  func streamStatus(streamHandle: Swift.UnsafeMutablePointer<CCocoClientSDK.coco_client_media_stream_handle_t>?, channelHandle: Swift.UnsafeMutablePointer<CCocoClientSDK.coco_client_channel_handle_t>?, channelPort: Swift.UInt16, status: CocoClientSDK.CapabilityMediaStreaming.DataStreamStatus, coconetContext: Swift.UnsafeMutableRawPointer?, streamContext: Swift.UnsafeMutableRawPointer?, channelContext: Swift.UnsafeMutableRawPointer?)
  func streamReceive(streamHandle: Swift.UnsafeMutablePointer<CCocoClientSDK.coco_client_media_stream_handle_t>?, channelHandle: Swift.UnsafeMutablePointer<CCocoClientSDK.coco_client_channel_handle_t>?, data: Swift.UnsafeMutableRawPointer?, len: Darwin.size_t, coconetContext: Swift.UnsafeMutableRawPointer?, streamContext: Swift.UnsafeMutableRawPointer?, channelContex: Swift.UnsafeMutableRawPointer?)
}
@_hasMissingDesignatedInitializers public class Value {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityOnOff : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_ONOFF_MIN
    case COCO_STD_ATTR_ON_FLAG
    case COCO_STD_ATTR_ONOFF_MAX
    case COCO_STD_ATTR_ON_OFF_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case ONOFF_MIN
    case ON
    case OFF
    case TOGGLE
    case FETCH_ON_OFF_STATUS
    case ONOFF_MAX
    case COCO_STD_CMD_ON_OFF_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: CocoClientSDK.CommandIDProtocol?) -> Swift.Bool
  public func sendCommandOn(commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func sendCommandOff(commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func sendCommandToggle(commandContext: Swift.UnsafeMutableRawPointer?) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityTemperatureSensing : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_TEMPERATURE_MIN
    case COCO_STD_ATTR_CURRENT_TEMP_CELSIUS
    case COCO_STD_ATTR_TEMPERATURE_MAX
    case COCO_STD_ATTR_TEMPERATURE_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_TEMPERATURE_MIN
    case COCO_STD_CMD_TEMPERATURE_MAX
    case COCO_STD_CMD_TEMPERATURE_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: CocoClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers public class CapabilitySnapshot : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_SNAPSHOT_MIN
    case COCO_STD_ATTR_SNAPSHOT_IMG_SUPPORT_RESOLUTION_HEIGHT_ARR
    case COCO_STD_ATTR_SNAPSHOT_IMG_SUPPORT_RESOLUTION_WIDTH_ARR
    case COCO_STD_ATTR_SNAPSHOT_IMG_DEFAULT_RESOLUTION_HEIGHT
    case COCO_STD_ATTR_SNAPSHOT_IMG_DEFAULT_RESOLUTION_WIDTH
    case COCO_STD_ATTR_SNAPSHOT_MAX
    case COCO_STD_ATTR_SNAPSHOT_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_SNAPSHOT_MIN
    case COCO_STD_CMD_SNAPSHOT_IMAGE
    case COCO_STD_CMD_SNAPSHOT_MAX
    case COCO_STD_CMD_SNAPSHOT_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum SnapShotStatus : Swift.Int32, Swift.Codable {
    case COCO_CLIENT_SNAPSHOT_MIN
    case COCO_CLIENT_SNAPSHOT_SUCCESS
    case COCO_CLIENT_SNAPSHOT_FAILURE
    case COCO_CLIENT_SNAPSHOT_TIMEOUT
    case COCO_CLIENT_SNAPSHOT_MAX
    case COCO_CLIENT_SNAPSHOT_INVALID
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public func snapshotImage(channelPort: Swift.UInt32, pixelHeight: Swift.UInt16, pixelWidth: Swift.UInt16, commandContext: Swift.UnsafeMutableRawPointer?) throws
  public func captureSnapshot(pixelHeight: Swift.UInt16, pixelWidth: Swift.UInt16, downloadPath: Swift.String, delegate: CocoClientSDK.SnapshotDelegate, timeoutMs: Swift.UInt32, commandContext: Swift.UnsafeMutableRawPointer?)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  override public init(capabilityId: Swift.Int32, parent: CocoClientSDK.Resource)
}
open class Zone : Swift.Codable {
  public var parentNetwork: CocoClientSDK.Network? {
    get
  }
  public var zoneId: Swift.UInt16 {
    get
  }
  public var zoneName: Swift.String {
    get
  }
  public var resources: Swift.Set<CocoClientSDK.Resource> {
    get
  }
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  public init(zoneId: Swift.UInt16, parent: CocoClientSDK.Network)
  open func setName(name: Swift.String)
  open func setParent(network: CocoClientSDK.Network?)
  open func addToResourceMap(resource: CocoClientSDK.Resource)
  open func removeFromResourceMap(resource: CocoClientSDK.Resource)
  open func clearResources()
  public func update(name: Swift.String, timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func addResources(resources: [CocoClientSDK.Resource], timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func removeResources(resources: [CocoClientSDK.Resource], timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func moveResource(destination: CocoClientSDK.Zone, resource: CocoClientSDK.Resource, timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func moveResources(destination: CocoClientSDK.Zone, resources: [CocoClientSDK.Resource], timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  @objc deinit
}
extension Zone : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  open var hashValue: Swift.Int {
    get
  }
}
extension Zone : Swift.Equatable {
  public static func == (lhs: CocoClientSDK.Zone, rhs: CocoClientSDK.Zone) -> Swift.Bool
}
@_hasMissingDesignatedInitializers open class Factory : CocoClientSDK.Creator {
  public static var shared: CocoClientSDK.Factory
  public func createAttribute(attributeId: Swift.Int32, parent: CocoClientSDK.Capability) -> CocoClientSDK.Attribute
  open func getNetwork(networkId: Swift.String) -> CocoClientSDK.Network
  open func getDevice(deviceNodeId: Swift.UInt32, parent: CocoClientSDK.Network) -> CocoClientSDK.Device
  open func getZone(zoneId: Swift.UInt16, parent: CocoClientSDK.Network) -> CocoClientSDK.Zone
  open func getScene(sceneId: Swift.UInt16, parent: CocoClientSDK.Network) -> CocoClientSDK.Scene
  open func getResource(eui: Swift.String, parentDevice: CocoClientSDK.Device) -> CocoClientSDK.Resource
  open func getCapability(capabilityId: Swift.Int32, parent: CocoClientSDK.Resource) -> CocoClientSDK.Capability
  open func getAttribute(attributeId: Swift.Int32, parent: CocoClientSDK.Capability) -> CocoClientSDK.Attribute
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityIlluminance : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_ILLUMINANCE_MIN
    case COCO_STD_ATTR_CURRENT_LUMINANCE_LUX
    case COCO_STD_ATTR_ILLUMINANCE_MAX
    case COCO_STD_ATTR_ILLUMINANCE_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_ILLUMINANCE_MIN
    case COCO_STD_CMD_ILLUMINANCE_MAX
    case COCO_STD_CMD_ILLUMINANCE_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: CocoClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
public enum NodeType : Swift.Int32, Swift.Codable {
  case COCO_STD_NODE_TYPE_MIN
  case COCO_STD_NODE_TYPE_NETWORK
  case COCO_STD_NODE_TYPE_DEVICE
  case COCO_STD_NODE_TYPE_CLIENT
  case COCO_STD_NODE_TYPE_MAX
  case COCO_STD_NODE_TYPE_UBOUND
  public typealias RawValue = Swift.Int32
  public init?(rawValue: Swift.Int32)
  public var rawValue: Swift.Int32 {
    get
  }
}
open class Network : Swift.Codable {
  public enum State : Swift.Int32, Swift.Codable {
    case COCO_CLIENT_COCONET_STATE_MIN
    case COCO_CLIENT_CONNECTED
    case COCO_CLIENT_CONNECTING
    case COCO_CLIENT_CONNECT_ERROR
    case COCO_CLIENT_COCONET_RESET
    case COCO_CLIENT_DISCONNECTED
    case COCO_CLIENT_COCONET_STATE_MAX
    case COCO_CLIENT_COCONET_STATE_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum UserRole : Swift.Int32, Swift.Codable {
    case USER_ROLE_MIN
    case USER_ROLE_OWNER
    case USER_ROLE_ADMIN
    case USER_ROLE_GUEST
    case USER_ROLE_MAX
    case USER_ROLE_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum AccessType : Swift.Int32, Swift.Codable {
    case ACCESS_TYPE_MIN
    case ACCESS_TYPE_LOCAL
    case ACCESS_TYPE_REMOTE
    case ACCESS_TYPE_MAX
    case ACCESS_TYPE_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum NetworkType : Swift.Int32, Swift.Codable {
    case COCO_CLIENT_COCONET_TYPE_MIN
    case COCO_CLIENT_COCONET_TYPE_IOT
    case COCO_CLIENT_COCONET_TYPE_CALL_NET
    case COCO_CLIENT_COCONET_TYPE_MAX
    case COCO_CLIENT_COCONET_TYPE_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var id: Swift.String {
    get
  }
  public var state: CocoClientSDK.Network.State {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var port: Swift.Int {
    get
  }
  public var userRole: CocoClientSDK.Network.UserRole? {
    get
  }
  public var accessType: CocoClientSDK.Network.AccessType? {
    get
  }
  public var networkType: CocoClientSDK.Network.NetworkType? {
    get
  }
  public var deviceMap: [Swift.UInt32 : CocoClientSDK.Device] {
    get
  }
  public var sceneMap: [Swift.UInt16 : CocoClientSDK.Scene] {
    get
  }
  public var zoneMap: [Swift.UInt16 : CocoClientSDK.Zone] {
    get
  }
  public var ruleMap: [Swift.UInt16 : CocoClientSDK.Rule] {
    get
  }
  public static var DEFAULT_ZONE_ID: Swift.UInt16
  public static var DEFAULT_ZONE_NAME: Swift.String
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  public init(id: Swift.String)
  open func setName(name: Swift.String)
  open func setUerRole(userRole: CocoClientSDK.Network.UserRole)
  open func setAccessType(accessType: CocoClientSDK.Network.AccessType)
  open func setNetworkType(networkType: CocoClientSDK.Network.NetworkType)
  open func setPort(with port: Swift.Int)
  open func setState(state: CocoClientSDK.Network.State)
  open func addToDeviceMap(device: CocoClientSDK.Device)
  open func setDeviceMap(deviceMap: [Swift.UInt32 : CocoClientSDK.Device])
  open func removeFromDeviceMap(deviceNodeId: Swift.UInt32)
  open func clearDeviceMap()
  open func containsDevice(deviceNodeId: Swift.UInt32) -> Swift.Bool
  open func addToZoneMap(zone: CocoClientSDK.Zone)
  open func removeFromZoneMap(zoneId: Swift.UInt16)
  open func clearZoneMap()
  open func containsZone(zoneId: Swift.UInt16) -> Swift.Bool
  open func addToSceneMap(scene: CocoClientSDK.Scene)
  open func removeFromSceneMap(sceneId: Swift.UInt16)
  open func addToRuleMap(rule: CocoClientSDK.Rule)
  open func removeFromRuleMap(ruleId: Swift.UInt16)
  open func setSceneMap(sceneMap: [Swift.UInt16 : CocoClientSDK.Scene])
  open func clearSceneMap()
  open func containsScene(sceneId: Swift.UInt16) -> Swift.Bool
  public func connect(to networkType: CocoClientSDK.Network.NetworkType = .COCO_CLIENT_COCONET_TYPE_IOT) throws -> Swift.Int32
  public func connect(to networkType: CocoClientSDK.Network.NetworkType = .COCO_CLIENT_COCONET_TYPE_CALL_NET, nodeId: Swift.UInt32, with inviteURL: Swift.String) throws -> Swift.Bool
  public func disconnect() throws
  public func leaveNetwork(context: Swift.UnsafeMutableRawPointer?) throws
  public func addZone(name: Swift.String, timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func deleteZone(zone: CocoClientSDK.Zone, timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func addScene(sceneName: Swift.String, timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func deleteScene(scene: CocoClientSDK.Scene, timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func deleteScenes(scenes: [CocoClientSDK.Scene], timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func addRule(ruleName: Swift.String, timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func deleteRule(rule: CocoClientSDK.Rule, timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func deleteRules(rules: [CocoClientSDK.Rule], timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func deleteZones(zones: [CocoClientSDK.Zone], timeout: Swift.UInt32 = CocoClient.timeout, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func forget() throws
  public func sendContentInfo(with metadata: Swift.String?, contentTime: Darwin.time_t, nodeIds: [Swift.UInt32]) throws -> Swift.Bool
  public func sendData(with data: Swift.String?, nodeIds: [Swift.UInt32]) throws -> Swift.Bool
  @objc deinit
}
extension Network : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  open var hashValue: Swift.Int {
    get
  }
}
extension Network : Swift.Equatable {
  public static func == (lhs: CocoClientSDK.Network, rhs: CocoClientSDK.Network) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class NetworkCMDStatus {
  public var networkId: Swift.String {
    get
  }
  public var cmdSenderNodeId: Swift.UInt32 {
    get
  }
  public var statusCode: CocoClientSDK.StatusCode {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CommandColor : CocoClientSDK.Command {
  public var transition: Swift.Bool? {
    get
  }
  public var transitionTime: Swift.UInt32? {
    get
  }
  public var commandID: CocoClientSDK.CapabilityColor.CommandId? {
    get
  }
  public init(transition: Swift.Bool, transitionTime: Swift.UInt32, commandID: CocoClientSDK.CapabilityColor.CommandId)
  public static func get_color_cmd_command_obj(commandParam: Swift.UnsafeMutableRawPointer?, commandId: Swift.Int32) -> CocoClientSDK.CommandColor?
  @objc deinit
  override public init(cmdID: Swift.Int32)
}
@_hasMissingDesignatedInitializers public class RGB : CocoClientSDK.CommandColor {
  public var red: Swift.UInt8? {
    get
  }
  public var green: Swift.UInt8? {
    get
  }
  public var blue: Swift.UInt8? {
    get
  }
  public init(red: Swift.UInt8, green: Swift.UInt8, blue: Swift.UInt8, transition: Swift.Bool, transitionTime: Swift.UInt32)
  @objc deinit
  override public init(transition: Swift.Bool, transitionTime: Swift.UInt32, commandID: CocoClientSDK.CapabilityColor.CommandId)
}
@_hasMissingDesignatedInitializers public class HSL : CocoClientSDK.CommandColor {
  public var hue: Swift.UInt16? {
    get
  }
  public var saturation: Swift.UInt8? {
    get
  }
  public var luminance: Swift.UInt8? {
    get
  }
  public init(hue: Swift.UInt16, saturation: Swift.UInt8, luminance: Swift.UInt8, transition: Swift.Bool, transitionTime: Swift.UInt32)
  @objc deinit
  override public init(transition: Swift.Bool, transitionTime: Swift.UInt32, commandID: CocoClientSDK.CapabilityColor.CommandId)
}
@_hasMissingDesignatedInitializers public class Temperature : CocoClientSDK.CommandColor {
  public var temperature: Swift.Int? {
    get
  }
  public init(temperature: Swift.Int, transition: Swift.Bool, transitionTime: Swift.UInt32)
  @objc deinit
  override public init(transition: Swift.Bool, transitionTime: Swift.UInt32, commandID: CocoClientSDK.CapabilityColor.CommandId)
}
@_hasMissingDesignatedInitializers public class ColorComponent : CocoClientSDK.CommandColor {
  public var colorComponentIds: [Swift.Int] {
    get
  }
  public var colorComponentValues: [Swift.Int] {
    get
  }
  public init(colorComponentIds: [Swift.Int], colorComponentValues: [Swift.Int], transition: Swift.Bool, transitionTime: Swift.UInt32)
  @objc deinit
  override public init(transition: Swift.Bool, transitionTime: Swift.UInt32, commandID: CocoClientSDK.CapabilityColor.CommandId)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityWarning : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_WARNING_MIN
    case COCO_STD_ATTR_WARNING_STATE
    case COCO_STD_ATTR_WARNING_MAX
    case COCO_STD_ATTR_WARNING_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_WARNING_MIN
    case COCO_STD_CMD_WARNING_START
    case COCO_STD_CMD_WARNING_STOP
    case COCO_STD_CMD_WARNING_MAX
    case COCO_STD_CMD_﻿WARNING_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum WarningType : Swift.Int32, Swift.Codable {
    case COCO_STD_WARNING_TYPE_MIN
    case COCO_STD_WARNING_TYPE_BURGLAR
    case COCO_STD_WARNING_TYPE_FIRE
    case COCO_STD_WARNING_TYPE_EMERGENCY
    case COCO_STD_WARNING_TYPE_POLICE_PANIC
    case COCO_STD_WARNING_TYPE_FIRE_PANIC
    case COCO_STD_WARNING_TYPE_EMERGENCY_PANIC
    case COCO_STD_WARNING_TYPE_MAX
    case COCO_STD_WARNING_TYPE_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: CocoClientSDK.CommandIDProtocol?) -> Swift.Bool
  public func startWarning(warningType: CocoClientSDK.CapabilityWarning.WarningType, commandContext: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func stopWarning(commandContext: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Message {
  public enum MessageType : Swift.Int32 {
    case COCO_STD_MESSAGE_MIN
    case COCO_STD_MESSAGE_PROMPT
    case COCO_STD_MESSAGE_INFO
    case COCO_STD_MESSAGE_ERROR
    case COCO_STD_MESSAGE_WARNING
    case COCO_STD_MESSAGE_CRITICAL
    case COCO_STD_MESSAGE_MAX
    case COCO_STD_MESSAGE_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var networkId: Swift.String {
    get
  }
  public var deviceNodeId: Swift.UInt32 {
    get
  }
  public var devCmdSenderNodeId: Swift.UInt32 {
    get
  }
  public var devCmdSeqNum: Swift.UInt32 {
    get
  }
  public var messageTitle: Swift.String {
    get
  }
  public var messageText: Swift.String {
    get
  }
  public var type: CocoClientSDK.Message.MessageType {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InfoRespDSK : CocoClientSDK.InfoResponseValue {
  public var dsk: Swift.String {
    get
  }
  public init(dsk: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityPowerLevels : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_POWER_LEVEL_MEASUREMENT_MIN
    case COCO_STD_ATTR_BATTERY_VOLTAGE_MV
    case COCO_STD_ATTR_BATTERY_LEVEL_PCT
    case COCO_STD_ATTR_BATT_VOLT_LOW_FLAG
    case COCO_STD_ATTR_BATT_LEVEL_LOW_FLAG
    case COCO_STD_ATTR_BATT_LEVEL_CRIT_FLAG
    case COCO_STD_ATTR_POWER_LEVEL_MEASUREMENT_MAX
    case COCO_STD_ATTR_POWER_LEVEL_MEASUREMENT_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_POWER_LEVEL_MEASUREMENT_MIN
    case COCO_STD_CMD_FETCH_BATTERY_VOLTAGE_MV
    case COCO_STD_CMD_FETCH_BATTERY_LEVEL_PCT
    case COCO_STD_CMD_POWER_LEVEL_MEASUREMENT_MAX
    case COCO_STD_CMD_POWER_LEVEL_MEASUREMENT_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: CocoClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
public class InfoResponse {
  public enum State : Swift.Int {
    case COCO_STD_MIN
    case COCO_STD_SUCCESS
    case COCO_STD_INVALID
    case COCO_STD_FAILURE
    case COCO_STD_PARTIAL_FAILURE
    case COCO_STD_TIMEOUT
    case COCO_STD_REJECTED
    case COCO_STD_MAX
    case COCO_STD_UNBOUND
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public var state: CocoClientSDK.InfoResponse.State? {
    get
  }
  public var networkId: Swift.String? {
    get
  }
  public var reqNodeId: Swift.UInt32? {
    get
  }
  public var requestId: Swift.UInt32? {
    get
  }
  public var parameters: [CocoClientSDK.Parameter] {
    get
  }
  public init(infoRequest: CocoClientSDK.InfoRequest, parameters: [CocoClientSDK.Parameter])
  public init(networkId: Swift.String, reqNodeId: Swift.UInt32, cmdSeqNum: Swift.UInt32, requestId: Swift.UInt32, parameters: [CocoClientSDK.Parameter])
  @objc deinit
}
public enum States {
  case LOCAL_NMN
  case LOCAL_NW_DATA
  case ONLINE
  case OFFLINE
  case CONNECTING
  public static func == (a: CocoClientSDK.States, b: CocoClientSDK.States) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers public class ConnectivityStateManager {
  public static var shared: CocoClientSDK.ConnectivityStateManager
  public func getState(network: CocoClientSDK.Network) -> CocoClientSDK.States
  @objc deinit
}
extension ConnectivityStateManager : CocoClientSDK.CocoCallbackDelegate {
  public func NodeConnectStatusCallback(network: CocoClientSDK.Network?, nodeId _: Swift.UInt32, isOnline: Swift.Bool, nodeType: CocoClientSDK.NodeType?, coconetContext _: Swift.UnsafeMutableRawPointer?)
  public func ConnectStatusCallback(network: CocoClientSDK.Network?, coconetStatus _: CocoClientSDK.Network.State, context _: Swift.UnsafeMutableRawPointer?)
  public func NetworkDataCallback(network: CocoClientSDK.Network, coconetContext _: Swift.UnsafeMutableRawPointer?)
}
public enum DataType : Swift.Int32, Swift.Hashable, Swift.Codable {
  case COCO_STD_DATA_TYPE_MIN
  case COCO_STD_DATA_TYPE_BOOLEAN
  case COCO_STD_DATA_TYPE_BOOLEAN_ARR
  case COCO_STD_DATA_TYPE_STRING
  case COCO_STD_DATA_TYPE_STRING_ARR
  case COCO_STD_DATA_TYPE_UINT8
  case COCO_STD_DATA_TYPE_UINT8_ARR
  case COCO_STD_DATA_TYPE_UINT16
  case COCO_STD_DATA_TYPE_UINT16_ARR
  case COCO_STD_DATA_TYPE_UINT32
  case COCO_STD_DATA_TYPE_UINT32_ARR
  case COCO_STD_DATA_TYPE_UINT64
  case COCO_STD_DATA_TYPE_UINT64_ARR
  case COCO_STD_DATA_TYPE_INT8
  case COCO_STD_DATA_TYPE_INT8_ARR
  case COCO_STD_DATA_TYPE_INT16
  case COCO_STD_DATA_TYPE_INT16_ARR
  case COCO_STD_DATA_TYPE_INT32
  case COCO_STD_DATA_TYPE_INT32_ARR
  case COCO_STD_DATA_TYPE_INT64
  case COCO_STD_DATA_TYPE_INT64_ARR
  case COCO_STD_DATA_TYPE_FLOAT
  case COCO_STD_DATA_TYPE_FLOAT_ARR
  case COCO_STD_DATA_TYPE_DOUBLE
  case COCO_STD_DATA_TYPE_DOUBLE_ARR
  case COCO_STD_DATA_TYPE_JSON_STRING
  case COCO_STD_DATA_TYPE_JSON_STRING_ARR
  case COCO_STD_DATA_TYPE_MAX
  case COCO_STD_DATA_TYPE_UBOUND
  public typealias RawValue = Swift.Int32
  public init?(rawValue: Swift.Int32)
  public var rawValue: Swift.Int32 {
    get
  }
}
open class Attribute : Swift.Codable {
  public var parentCapability: CocoClientSDK.Capability? {
    get
  }
  public var attributeId: Swift.Int32 {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var description: Swift.String? {
    get
  }
  public var dataType: CocoClientSDK.Attribute.DataTypeValue? {
    get
  }
  public var arrayLength: Swift.Int? {
    get
  }
  public var minValue: Any? {
    get
  }
  public var maxValue: Any? {
    get
  }
  public var defaultValue: Any? {
    get
  }
  public var currentValue: Any? {
    get
  }
  public var minReportingInterval: Swift.UInt32? {
    get
  }
  public var maxReportingInterval: Swift.UInt32? {
    get
  }
  public enum DataTypeValue : Swift.Int32, Swift.Hashable, Swift.Codable {
    case COCO_DATA_TYPE_MIN
    case DOUBLE
    case DOUBLE_ARR
    case BOOL
    case BOOL_ARR
    case STRING
    case STRING_ARR
    case JSON_STRING
    case JSON_STRING_ARR
    case COCO_DATA_TYPE_MAX
    case COCO_DATA_TYPE_UBOUND
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  open func encode(to encoder: Swift.Encoder) throws
  public init(attributeId: Swift.Int32, parent: CocoClientSDK.Capability)
  open func setName(name: Swift.String)
  open func setDescription(description: Swift.String)
  open func setDataTypeValue(dataType: CocoClientSDK.Attribute.DataTypeValue)
  open func setArrayLength(arrayLength: Swift.Int)
  open func setMinValue(minValue: Any)
  open func setMaxValue(maxValue: Any)
  open func setDefaultValue(defaultValue: Any)
  open func setCurrentValue(currentValue: Any)
  open func setMinReportingInterval(minReportingInterval: Swift.UInt32)
  open func setMaxReportingInterval(maxReportingInterval: Swift.UInt32)
  open func setParent(capability: CocoClientSDK.Capability)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
public class Tunnel {
  public var tunnelHandle: Swift.OpaquePointer? {
    get
  }
  public var port: Swift.UInt16? {
    get
  }
  public var status: CocoClientSDK.CommandTunnel.Status? {
    get
  }
  public init(tunnelHandle: Swift.OpaquePointer?, status: CocoClientSDK.CommandTunnel.Status?, port: Swift.UInt16)
  public func getTunnelHandle() -> Swift.OpaquePointer?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityWrapper : CocoClientSDK.Capability {
  required public init(from decoder: Swift.Decoder) throws
  override public func supports(commandId: CocoClientSDK.CommandIDProtocol?) -> Swift.Bool
  public func getAttributeId(id: Swift.Int32) -> CocoClientSDK.AttributeIDProtocol
  @objc deinit
}
public class CommandImageCtrl : CocoClientSDK.Command {
  public var commandID: CocoClientSDK.CapabilityImageCtrl.CommandId {
    get
  }
  public init(commandID: CocoClientSDK.CapabilityImageCtrl.CommandId)
  @objc deinit
  override public init(cmdID: Swift.Int32)
}
@_hasMissingDesignatedInitializers public class Identifier {
  public var networkId: Swift.String {
    get
  }
  public var nodeId: Swift.UInt32? {
    get
  }
  public var resourceEUI: Swift.String? {
    get
  }
  public var capabilityId: CocoClientSDK.Capability.CapabilityId {
    get
  }
  public var attributeId: Swift.Int32 {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UploadTriggerURI : CocoClientSDK.Identifier {
  public var sceneId: Swift.UInt16? {
    get
  }
  public var ruleId: Swift.UInt16? {
    get
  }
  public init(networkId: Swift.String, nodeId: Swift.UInt32?, resourceEUI: Swift.String?, capabilityId: CocoClientSDK.Capability.CapabilityId, attributeId: Swift.Int32, sceneId: Swift.UInt16?, ruleId: Swift.UInt16?)
  @objc deinit
}
@_inheritsConvenienceInitializers public class SourceURI : CocoClientSDK.Identifier {
  public init(networkId: Swift.String, nodeId: Swift.UInt32?, resourceEUI: Swift.String?, capabilityId: CocoClientSDK.Capability.CapabilityId, attributeId: Swift.Int32)
  @objc deinit
}
public enum CacheManager {
  public static func addNetworkObject(network: CocoClientSDK.Network)
}
@_hasMissingDesignatedInitializers public class CommandContactSensing : CocoClientSDK.Command {
  public var commandID: CocoClientSDK.CapabilityContactSensing.CommandId? {
    get
  }
  public init(commandID: CocoClientSDK.CapabilityContactSensing.CommandId)
  @objc deinit
  override public init(cmdID: Swift.Int32)
}
public enum Protocol : Swift.Int32, Swift.Codable {
  case COCO_STD_PROTOCOL_MIN
  case COCO_STD_PROTOCOL_ZWAVE
  case COCO_STD_PROTOCOL_ZIGBEE
  case COCO_STD_PROTOCOL_MAX
  case COCO_STD_PROTOCOL_UBOUND
  public typealias RawValue = Swift.Int32
  public init?(rawValue: Swift.Int32)
  public var rawValue: Swift.Int32 {
    get
  }
}
public class CommandDiscover {
  public init(protocolId: CocoClientSDK.`Protocol`)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityStationaryPosition : CocoClientSDK.Capability {
  public enum AttributeId : Swift.Int32, CocoClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_ATTR_STATIONARY_POSITION_MIN
    case COCO_STD_ATTR_STATIONARY_POSITION_BEACON_LOC
    case COCO_STD_ATTR_STATIONARY_POSITION_DEVICE_LOC
    case COCO_STD_ATTR_STATIONARY_POSITION_MAX
    case COCO_STD_ATTR_STATIONARY_POSITION_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, CocoClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable {
    case COCO_STD_CMD_STATIONARY_POSITION_MIN
    case COCO_STD_CMD_STATIONARY_POSITTION_SET_DEVICE_LOC
    case COCO_STD_CMD_STATIONARY_POSITION_MAX
    case COCO_STD_CMD_STATIONARY_POSITION_UBOUND
    public func getInt() -> Swift.Int32
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public init(capabilityId: Swift.Int32, parent: CocoClientSDK.Resource)
  override public func supports(commandId: CocoClientSDK.CommandIDProtocol?) -> Swift.Bool
  public func setDeviceLocation(locationId: Swift.String, lotId: Swift.String, xCoordinate: Swift.Double, yCoordinate: Swift.Double, environmentalFactor: Swift.UInt32, commandContext: Swift.UnsafeMutableRawPointer?) throws
  @_hasMissingDesignatedInitializers public class DeviceLocation : Swift.Codable {
    public var locationId: Swift.String?
    public var lotId: Swift.String?
    public var xCoordinate: Swift.Double?
    public var yCoordinate: Swift.Double?
    public var environmentalFactor: Swift.UInt32?
    @objc deinit
    required public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  @_hasMissingDesignatedInitializers public class BeaconLocation : Swift.Codable {
    public var locationId: Swift.String?
    public var lotId: Swift.String?
    public var xCoordinate: Swift.Double?
    public var yCoordinate: Swift.Double?
    public var beaconId: Swift.String?
    public var deviceResourceName: Swift.String?
    public var avgRadius: Swift.Double?
    public var errorPrecision: Swift.Double?
    public var avgTimeDuration: Swift.Int?
    @objc deinit
    required public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc deinit
}
